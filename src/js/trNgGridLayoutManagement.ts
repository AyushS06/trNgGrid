module TrNgGrid {
    export enum GridSectionType {
        Enforced,
        Header,
        Body
    } 

    export interface IGridColumnOptions {
        displayName?: string;
        displayAlign?: string;
        displayFormat?: string;
        enableSorting?: boolean;
        enableFiltering?: boolean;
        cellWidth?: string;
        cellHeight?: string;
        filter?: string;

        displayFieldName?: string;
        columnTitle?: string;
        fieldName: string;
        isCustomized?: boolean;
        isAutoGenerated?: boolean;
    }

    export class GridRow {
        cells: Array<IGridColumnOptions> =[];

        registerCell(cell: IGridColumnOptions): IGridColumnOptions {
            var cellFound = false;
            for (var cellIndex = 0; (cellIndex < this.cells.length) && (!cellFound); cellIndex++) {
                if (this.cells[cellIndex].fieldName === cell.fieldName) {
                    this.cells[cellIndex] = cell;
                    cellFound = true;
                }
            }

            if (!cellFound) {
                this.cells.push(cell);
            }

            return cell;
        }

        unregisterCell(cell: IGridColumnOptions) {
            for (var cellIndex = 0; cellIndex < this.cells.length; cellIndex++) {
                if (this.cells[cellIndex] === cell) {
                    this.cells.splice(cellIndex, 1);
                    return;
                }
            }            
        }
    }

    /*
     * Holds details about a section (e.g. head, body, footer)
     * including the row composition.
     */
    export class GridSection {
        rows: Array<GridRow> = [];

        registerRow(): GridRow {
            var row = new GridRow();
            this.rows.push(row);
            return row;
        }

        unregisterRow(row: GridRow) {
            for (var rowIndex = 0; rowIndex < this.rows.length; rowIndex++) {
                if (this.rows[rowIndex] === row) {
                    this.rows.splice(rowIndex, 1);
                    return;
                }
            }
        }
    }

    /*
     * Holds details about the available sections in the grid.
     */
    export class GridLayout {
        private sections: Array<GridSection> = new Array(GridSectionType.Body + 1);

        getSection(section: GridSectionType):GridSection {
            var colSection = this.sections[section];
            if (!colSection) {
                this.sections[<number>section] = colSection = new GridSection();
            }

            return colSection;
        }
    }

} 