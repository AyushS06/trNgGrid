module TrNgGrid {
    export interface IGridSectionScope extends ng.IScope {
        grid:GridController;
        gridOptions: IGridOptions;
        gridLayoutSection: GridLayoutSection;
    }

    export interface IGridRowScope extends IGridSectionScope {
        gridLayoutRow: GridLayoutRow;
    }
     
    export interface IGridColumnScope extends IGridRowScope {
        gridColumnOptions: IGridColumnOptions;
        gridColumnLayout: IGridColumnLayoutOptions;
    }

    /*
     * Set up the scope for the THEAD section
     */
    gridModule.directive(Constants.headerDirective, [
        () => {
            return {
                restrict: 'A',
                scope: true,
                require: "^" + Constants.tableDirective,
                link: {
                    pre(scope: IGridSectionScope, instanceElement: ng.IAugmentedJQuery, tAttrs: ng.IAttributes, gridController: GridController, transcludeFn: ng.ITranscludeFunction) {
                        scope.grid = gridController;
                        scope.gridOptions = gridController.gridOptions;
                        scope.gridLayoutSection = gridController.gridLayout.getSection(GridSectionType.Header);
                    }
                }
            }
        }
    ]);

    /*
    * Set up the row scope for the THEAD section
    */
    gridModule.directive(Constants.rowDirective, ["$compile", Constants.gridConfigurationService,
        ($compile: ng.ICompileService, gridConfiguration: IGridConfiguration) => {
            return {
                restrict: 'A',
                scope: true,
                require: "^" + Constants.tableDirective,
                compile($templateElement: ng.IAugmentedJQuery, $tAttrs: ng.IAttributes) {
                    // compile a standard cell and a placeholder
                    return {
                        pre($scope: IGridRowScope, $instanceElement: ng.IAugmentedJQuery, $tAttrs: ng.IAttributes, $controller: GridController, $transcludeFn: ng.ITranscludeFunction) {
                            $scope.gridLayoutRow = $scope.gridLayoutSection.registerRow();
                            $scope.$on("$destroy",() => {
                                debugger;
                                $scope.gridLayoutSection.unregisterRow($scope.gridLayoutRow);
                            });

                            //$scope.$watch("gridLayoutRow.cells", (newValue: any, oldValue: any) => {
                            //    debugger;
                            //});
                        },
                        post($scope: IGridRowScope, $instanceElement: ng.IAugmentedJQuery, $tAttrs: ng.IAttributes, $controller: GridController, $transcludeFn: ng.ITranscludeFunction) {
                        }
                    }
                }
            }
        }
    ]);

    /*
     * Set up placeholders for the row
     */
    gridModule.directive(Constants.cellPlaceholderDirective, ["$compile", "$interpolate", Constants.gridConfigurationService,
        ($compile: ng.ICompileService, $interpolate:ng.IInterpolateService, gridConfiguration: IGridConfiguration) => {
            // prepare the auto-generated element
            //autoGeneratedCellTemplate.attr(Constants.headerCellDirectiveAttribute, "");
            //autoGeneratedCellTemplate.attr(Constants.dataColumnIsAutoGeneratedAttribute, "true");
            // autoGeneratedCellTemplate.attr("data-field-name", $interpolate.startSymbol() + "gridColumnLayout.fieldName" + $interpolate.endSymbol());

            return {
                restrict: 'A',
                require: [Constants.cellPlaceholderDirective, "^" + Constants.tableDirective],
                controller: [GridColumnController],
                transclude: "element",
                compile($templatedElement: ng.IAugmentedJQuery, $tAttrs: ng.IAttributes) {
                    return {
                        pre($scope: IGridColumnScope, $instanceElement: ng.IAugmentedJQuery, $tAttrs: ng.IAttributes, $controllers: Array<any>, $transcludeFn: ng.ITranscludeFunction) {
                            $scope.gridColumnLayout.placeholder = $instanceElement;
                        },
                        post($scope: IGridColumnScope, $instanceElement: ng.IAugmentedJQuery, $tAttrs: ng.IAttributes, $controllers: Array<any>, $transcludeFn: ng.ITranscludeFunction) {
                            var columnSetupController: GridColumnController = $controllers[0];

                            if ($scope.gridColumnLayout.isAutoGenerated) {
                                columnSetupController.prepareAutoGeneratedColumnScope($scope);

                                var isDestroyed = false;
                                var autoGeneratedCellInstance: ng.IAugmentedJQuery = null;
                                
                                var setupAutoGeneratedCell = () => {
                                    if (autoGeneratedCellInstance) {
                                        gridConfiguration.debugMode && log("Removing auto-generated cell for field " + $scope.gridColumnLayout.fieldName);
                                        autoGeneratedCellInstance.remove();
                                        autoGeneratedCellInstance = null;
                                    }

                                    if ($scope.gridColumnLayout && $scope.gridColumnOptions) {
                                        gridConfiguration.debugMode && log("Creating auto-generated cell for field " + $scope.gridColumnLayout.fieldName);
                                        var autoGeneratedCellTemplate = angular.element(gridConfiguration.templates.headerCellStandard);
                                        autoGeneratedCellTemplate.append(angular.element(gridConfiguration.templates.headerCellContentsStandard));
                                        $instanceElement.after(autoGeneratedCellTemplate);
                                        autoGeneratedCellInstance = $compile(autoGeneratedCellTemplate)($scope);
                                    }
                                }

                                $scope.$watchGroup(["gridColumnLayout", "gridColumnOptions"],(newValues: Array<any>) => {
                                    setupAutoGeneratedCell();
                                });

                                $scope.$on("$destroy", () => {
                                    debugger;
                                    isDestroyed = true;
                                    setupAutoGeneratedCell();
                                    $scope.gridColumnLayout.placeholder = null;
                                });
                            }
                        }
                    };
                }
            };
        }
    ]);

    /*
     * Ensure the columns settings are extracted from the TH elements, and also ensure the scope is properly set.
     */
    gridModule.directive(Constants.cellDirective, ["$compile", Constants.gridConfigurationService,
        ($compile: ng.ICompileService, gridConfiguration: IGridConfiguration) => {
                return {
                    restrict: 'A',
                    require: [Constants.cellDirective, "^" + Constants.tableDirective],
                    controller: [GridColumnController],
                    scope:{
                        isCustomized: "@" + Constants.dataColumnIsCustomizedField,
                        // isAutoGenerated: "@" + Constants.dataColumnIsAutoGeneratedField, - optimized to be treated inside the placeholders

                        fieldName: "@",
                        displayName: "@",
                        displayAlign: "@",
                        displayFormat: "@",
                        enableSorting: "@",
                        enableFiltering: "@",
                        cellWidth: "@",
                        cellHeight: "@",
                        filter: "@",
                        colspan: "@"
                    },
                    // the next few lines are idiotic, but otherwise we hit this stupid bug: https://github.com/angular/angular.js/issues/11304
                    transclude: 'element',
                    replace: true,
                    template: '<td style="display:none"></td>',
                    compile($templateElement: ng.IAugmentedJQuery, $tAttrs: ng.IAttributes) {
                        return {
                            pre($settingsScope: ng.IScope, $instanceElement: ng.IAugmentedJQuery, $tAttrs: ng.IAttributes, $controllers: Array<any>, $transcludeFn: ng.ITranscludeFunction) {
                            },
                            post($settingsScope: IGridColumnScope, $instanceElement: ng.IAugmentedJQuery, $tAttrs: ng.IAttributes, $controllers: Array<any>, $transcludeFn: ng.ITranscludeFunction) {
                                var columnSetupController: GridColumnController = $controllers[0];
                                var gridColumnScope = <IGridColumnScope>$settingsScope.$parent.$new();
                                debugger;
                                columnSetupController.prepareColumnSettingsScope(gridColumnScope, $settingsScope);

                                var transcludedCellElement: ng.IAugmentedJQuery = null;
                                var isDestroyed = false;

                                var setupTranscludedElement = () => {
                                    if (transcludedCellElement) {
                                        gridConfiguration.debugMode && log("Removing tanscluded cell for field " + gridColumnScope.gridColumnLayout.fieldName);
                                        transcludedCellElement.remove();
                                        transcludedCellElement = null;
                                    }

                                    if (!isDestroyed && gridColumnScope.gridColumnLayout && gridColumnScope.gridColumnLayout.placeholder && gridColumnScope.gridColumnOptions) {
                                        gridConfiguration.debugMode && log("Transcluding and attaching cell for field " + gridColumnScope.gridColumnLayout.fieldName);
                                        console.log($instanceElement);

                                        // link the element with the placeholder
                                        debugger;
                                        $transcludeFn(gridColumnScope,(newTranscludedCellElement: ng.IAugmentedJQuery) => {
                                            debugger;
                                            transcludedCellElement = newTranscludedCellElement;
                                            gridColumnScope.gridColumnLayout.placeholder.after(transcludedCellElement);

                                            if (!gridColumnScope.gridColumnLayout.isCustomized) {
                                                // add the standard cell contents as well
                                                var standardCellContentsTemplate = angular.element(gridConfiguration.templates.headerCellContentsStandard);
                                                transcludedCellElement.append(standardCellContentsTemplate);
                                                $compile(standardCellContentsTemplate)(gridColumnScope);
                                            }
                                        }, gridColumnScope.gridColumnLayout.placeholder.parent());
                                    }
                                };

                                gridColumnScope.$watchGroup(["gridColumnLayout", "gridColumnOptions", "gridColumnLayout.placeholder"],(newValues: Array<any>) => {
                                    setupTranscludedElement();
                                });

                                gridColumnScope.$on("$destroy",() => {
                                    debugger;
                                    isDestroyed = true;
                                    setupTranscludedElement();
                                });
                            }
                        };
                    }
                };
            }
        ]);

}