module TrNgGrid {
    export interface IGridSectionScope extends ng.IScope {
        gridOptions: IGridOptions;
        gridLayoutSection: GridLayoutSection;
    }

    export interface IGridRowScope extends IGridSectionScope {
        gridLayoutRow: GridLayoutRow;
    }

    export interface IGridColumnScope extends IGridRowScope {
        gridColumnOptions: IGridColumnOptions;
        gridColumnLayout: IGridColumnLayoutOptions;
    }

    export interface IGridColumnSetup extends IGridColumnOptions, IGridColumnLayoutOptions {        
    }

    export interface IGridColumnSetupScope extends IGridColumnScope {
        gridColumnSetup: IGridColumnSetup;
    }

    /*
     * Set up the scope for the THEAD section
     */
    gridModule.directive(Constants.headerDirective, [
        () => {
            return {
                restrict: 'A',
                scope: true,
                require: "^" + Constants.tableDirective,
                link: {
                    pre(scope: IGridSectionScope, instanceElement: ng.IAugmentedJQuery, tAttrs: ng.IAttributes, gridController: GridController, transcludeFn: ng.ITranscludeFunction) {
                        scope.gridOptions = gridController.gridOptions;
                        scope.gridLayoutSection = gridController.gridLayout.getSection(GridSectionType.Header);
                    }
                }
            }
        }
    ]);

    /*
    * Set up the row scope for the THEAD section
    */
    gridModule.directive(Constants.headerRowDirective, ["$compile", Constants.gridConfigurationService,
        ($compile: ng.ICompileService, gridConfiguration: IGridConfiguration) => {
            return {
                restrict: 'A',
                scope: true,
                require: "^" + Constants.tableDirective,
                compile($templateElement: ng.IAugmentedJQuery, $tAttrs: ng.IAttributes) {
                    // compile a standard cell and a placeholder
                    return {
                        pre($scope: IGridRowScope, $instanceElement: ng.IAugmentedJQuery, $tAttrs: ng.IAttributes, $controller: GridController, $transcludeFn: ng.ITranscludeFunction) {
                            $scope.gridLayoutRow = $scope.gridLayoutSection.registerRow();
                            $scope.$on("$destroy",() => {
                                $scope.gridLayoutSection.unregisterRow($scope.gridLayoutRow);
                            });
                        },
                        post($scope: IGridRowScope, $instanceElement: ng.IAugmentedJQuery, $tAttrs: ng.IAttributes, $controller: GridController, $transcludeFn: ng.ITranscludeFunction) {
                        }
                    }
                }
            }
        }
    ]);

    /*
     * Set up placeholders for the row
     */
    gridModule.directive(Constants.headerCellPlaceholderDirective, ["$compile", "$interpolate", Constants.gridConfigurationService,
        ($compile: ng.ICompileService, $interpolate:ng.IInterpolateService, gridConfiguration: IGridConfiguration) => {
            return {
                restrict: 'A',
                require: "^" + Constants.tableDirective,
                transclude: "element",
                compile($templatedElement: ng.IAugmentedJQuery, $tAttrs: ng.IAttributes) {

                    return {
                        pre($scope: IGridColumnScope, $instanceElement: ng.IAugmentedJQuery, $tAttrs: ng.IAttributes, $controller: GridController, $transcludeFn: ng.ITranscludeFunction) {
                            $scope.gridColumnLayout.placeholder = $instanceElement;
                        },
                        post($scope: IGridColumnScope, $instanceElement: ng.IAugmentedJQuery, $tAttrs: ng.IAttributes, $controller: GridController, $transcludeFn: ng.ITranscludeFunction) {
                            if ($scope.gridColumnLayout.isAutoGenerated) {
                                // prepare the auto-generated element
                                var autoGeneratedTemplateCell = angular.element(gridConfiguration.templates.headerCellStandard);
                                autoGeneratedTemplateCell.attr(Constants.headerCellDirectiveAttribute, "");
                                autoGeneratedTemplateCell.attr(Constants.dataColumnIsAutoGeneratedAttribute, "true");
                                autoGeneratedTemplateCell.attr("data-field-name", $scope.gridColumnLayout.fieldName);

                                ////// $instanceElement.after(autoGeneratedTemplateCell);                               
                                ////var autoGeneratedElementLinkingFct = $compile(autoGeneratedTemplateCell);

                                ////// trigger the registration of auto-generated cells
                                ////var autoGeneratedCell: ng.IAugmentedJQuery = null;
                                ////autoGeneratedElementLinkingFct($scope, ($autoGeneratedCell: ng.IAugmentedJQuery) => {
                                ////    $instanceElement.after($autoGeneratedCell);
                                ////    autoGeneratedCell = $autoGeneratedCell;
                                ////});
                                ////$scope.$on("$destroy", () => {
                                ////    debugger;
                                ////    if (autoGeneratedCell) {
                                ////        autoGeneratedCell.remove();
                                ////        autoGeneratedCell = null;

                                ////        autoGeneratedTemplateCell.remove();
                                ////        autoGeneratedTemplateCell = null;
                                ////    }
                                ////});
                            }
                        }
                    };
                }
            };
        }
    ]);

    export class GridColumnSetupController
    {        
        constructor() {            
        }
    }

    /*
     * Ensure the columns settings are extracted from the TH elements, and also ensure the scope is properly set.
     */
    gridModule.directive(Constants.headerCellDirective, ["$compile", Constants.gridConfigurationService,
            ($compile: ng.ICompileService, gridConfiguration: IGridConfiguration) => {
                return {
                    restrict: 'A',
                    require: "^" + Constants.tableDirective,
                    controller: [GridColumnSetupController],
                    //bindToController: true,
                    //scope: {
                    //    isCustomized: "@" + Constants.dataColumnIsCustomizedField,
                    //    isAutoGenerated: "@" + Constants.dataColumnIsAutoGeneratedField,

                    //    fieldName: "@",
                    //    displayName: "@",
                    //    displayAlign: "@",
                    //    displayFormat: "@",
                    //    enableSorting: "@",
                    //    enableFiltering: "@",
                    //    cellWidth: "@",
                    //    cellHeight: "@",
                    //    filter: "@",
                    //    colspan: "@"                        
                    //},
                    //controllerAs: "gridColumnSetup",
                    transclude: 'element',
                    terminal: true,
                    scope: true,
                    compile($templateElement: ng.IAugmentedJQuery, $tAttrs: ng.IAttributes) {
                        var standardCellContentsElementLinkingFct = $compile(gridConfiguration.templates.headerCellContentsStandard);
                        var columnOptions: IGridColumnOptions;
                        var layoutOptions: IGridColumnLayoutOptions;

                        return {
                            pre($scope: IGridColumnScope, $instanceElement: ng.IAugmentedJQuery, $tAttrs: ng.IAttributes, $controller: GridController, $transcludeFn: ng.ITranscludeFunction) {
                                var setupColumn = (newSettings: IGridColumnSetup, oldSettings: IGridColumnSetup) => {
                                    if (angular.equals(newSettings, oldSettings)) {
                                        return;
                                    }

                                    columnOptions = {
                                        fieldName: newSettings.fieldName,
                                        displayName: newSettings.displayName,
                                        displayAlign: newSettings.displayAlign,
                                        displayFormat: newSettings.displayFormat,
                                        enableSorting: newSettings.enableSorting && newSettings.enableSorting.toString()==="true",
                                        enableFiltering: newSettings.enableSorting && newSettings.enableSorting.toString()==="true",
                                        cellWidth: newSettings.cellWidth,
                                        cellHeight: newSettings.cellHeight,
                                        filter: newSettings.filter
                                    };
                                    $controller.setColumnOptions(columnOptions);

                                    layoutOptions = {
                                        fieldName: columnOptions.fieldName,
                                        isAutoGenerated: newSettings.isAutoGenerated && newSettings.isAutoGenerated.toString()==="true",
                                        isCustomized: newSettings.isCustomized && newSettings.isCustomized.toString()==="true",
                                        isLinkedToField: columnOptions.isLinkedToField
                                    };

                                    if (layoutOptions.isAutoGenerated) {
                                        layoutOptions = $scope.gridLayoutRow.findCell(columnOptions.fieldName);
                                    }
                                    else {
                                        $scope.gridLayoutRow.registerCell(layoutOptions);
                                    }

                                    //if (!newSettings.isAutoGenerated) {
                                    //    // we are guided by the auto cell registration, we do not register new ones
                                    //    (<IGridRowScope>(cellSetupScope.$parent)).gridLayoutRow.registerCell(layoutOptions);
                                    //}
                                };

                                //cellSetupScope.$watch("gridColumnSetup", setupColumn);
                                //setupColumn($scope.gridColumnSetup, {});
                                setupColumn(<IGridColumnSetup>$tAttrs, null);

                                // set the isolated scope, we'll be watching it later
                                $scope.gridColumnLayout = layoutOptions;
                                $scope.gridColumnOptions = columnOptions;
                            },
                            post($scope: IGridColumnScope, $instanceElement: ng.IAugmentedJQuery, $tAttrs: ng.IAttributes, $controller: GridController, $transcludeFn: ng.ITranscludeFunction) {
                                var childScope: IGridColumnScope = null;
                                var transcludedCellElement: ng.IAugmentedJQuery = null;
                                var setupNewScope = () => {
                                    if (childScope) {
                                        childScope.$destroy();
                                        childScope = null;
                                    }
                                    if (transcludedCellElement) {
                                        transcludedCellElement.remove();
                                        transcludedCellElement = null;
                                    }

                                    childScope = <IGridColumnScope>$scope.$new();
                                    //childScope.gridColumnOptions = columnOptions;
                                    //childScope.gridColumnLayout = layoutOptions;

                                    if (layoutOptions.placeholder) {
                                        // link the element with the placeholder
                                        $transcludeFn(childScope, (newTranscludedCellElement: ng.IAugmentedJQuery) => {
                                            transcludedCellElement = newTranscludedCellElement;
                                            layoutOptions.placeholder.after(transcludedCellElement);

                                            if (!layoutOptions.isCustomized) {
                                                standardCellContentsElementLinkingFct(childScope, (newStandardCellContent: ng.IAugmentedJQuery) => {
                                                    newTranscludedCellElement.append(newStandardCellContent);
                                                });
                                            }
                                        });
                                    }
                                };

                                $scope.$watch("gridColumnLayout.placeholder",(newPlaceholder: ng.IAugmentedJQuery, oldPlaceholder: ng.IAugmentedJQuery) => {
                                    if (newPlaceholder === oldPlaceholder) {
                                        return;
                                    }
                                    setupNewScope();
                                });
                            }
                        };
                    }
                };
            }
        ]);

}