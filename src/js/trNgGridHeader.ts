module TrNgGrid {
    export interface IGridSectionScope extends ng.IScope {
        gridOptions: IGridOptions;
        gridSection: GridSection;
    }

    export interface IGridRowScope extends IGridSectionScope {
        gridRow: GridRow;
        gridRowColumns: Array<IGridColumnOptions>;
    }

    export interface IGridColumnScope extends IGridRowScope {
        gridColumnOptions: IGridColumnOptions;
    }

    export interface IGridIdentityColumnScope extends IGridColumnScope {
    }

    /*
     * Set up the scope for the THEAD section
     */
    gridModule.directive(Constants.headerDirective, [
        () => {
            return {
                restrict: 'A',
                scope: true,
                require: "^" + Constants.tableDirective,
                link: {
                    pre(scope: IGridSectionScope, instanceElement: ng.IAugmentedJQuery, tAttrs: ng.IAttributes, gridController: GridController, transcludeFn: ng.ITranscludeFunction) {
                        scope.gridOptions = gridController.gridOptions;
                        scope.gridSection = gridController.gridLayout.getSection(GridSectionType.Header);
                    }
                }
            }
        }
    ]);

    /*
    * Set up the row scope for the THEAD section
    */
    gridModule.directive(Constants.headerRowDirective, [
        () => {
            return {
                restrict: 'A',
                scope: true,
                require: "^" + Constants.tableDirective,
                link: {
                    pre(scope: IGridRowScope, instanceElement: ng.IAugmentedJQuery, tAttrs: ng.IAttributes, gridController: GridController, transcludeFn: ng.ITranscludeFunction) {
                        scope.gridRow = scope.gridSection.registerRow();
                        scope.gridRowColumns = scope.gridRow.cells;
                        scope.$on("$destroy",() => {
                            debugger;
                            scope.gridSection.unregisterRow(scope.gridRow);
                        });
                    }
                }
            }
        }
    ]);

    export class GridColumnIdentityController
    {        
        constructor() {            
        }
    }

    /*
     * Ensure the columns settings are extracted from the TH elements, and also ensure the scope is properly set.
     */
    gridModule.directive(Constants.cellHeaderDirective, ["$compile", Constants.gridConfigurationService, 
            ($compile: ng.ICompileService, gridConfiguration: IGridConfiguration) => {

                return {
                    restrict: 'A',
                    require: "^" + Constants.tableDirective,
                    controller: [GridColumnIdentityController],
                    bindToController: {
                        isCustomized: "@" + Constants.dataColumnIsCustomizedField,
                        isAutoGenerated: "@" + Constants.dataColumnIsAutoGeneratedField,

                        fieldName: "@",
                        displayName: "@",
                        displayAlign: "@",
                        displayFormat: "@",
                        enableSorting: "@",
                        enableFiltering: "@",
                        cellWidth: "@",
                        cellHeight: "@",
                        filter: "@",
                        colspan: "@"
                    },
                    scope: true,
                    controllerAs: "gridColumnOptions",
                    compile(templateElement: ng.IAugmentedJQuery, tAttrs: ng.IAttributes) {
                        var performColumnRegistration = (identityScope: IGridIdentityColumnScope, elementScope: IGridColumnScope, unregisterOnly:boolean) => {
                            // the identity scope is read-only, the element scope is set during this operation

                            // if not the first time call, unregister any non-auto-generated columns
                            if (elementScope && elementScope.gridColumnOptions && !elementScope.gridColumnOptions.isAutoGenerated) {
                                gridConfiguration.debugMode && log("Changes detected. Unregistering column... ");
                                identityScope.gridRow.unregisterCell(elementScope.gridColumnOptions); // remember, the field name might not even be the original one at this stage
                                elementScope.gridColumnOptions = null;
                            }

                            if (!unregisterOnly) {
                                elementScope.gridColumnOptions = identityScope.gridRow.registerCell(identityScope.)
                            }
                        };

                        return {
                            pre(identityScope: IGridIdentityColumnScope, instanceElement: ng.IAugmentedJQuery, tAttrs: ng.IAttributes, gridController: GridController, transcludeFn: ng.ITranscludeFunction) {
                                isOriginalElementAutoGenerated = identityScope.gridColumnOptions.isAutoGenerated;
                                gridConfiguration.debugMode && log("Registering column " + identityScope.gridColumnOptions.fieldName);
                                identityScope.gridColumnOptions = gridColumn = identityScope.gridRow.registerCell(identityScope.gridColumnOptions);

                                identityScope.$watch("gridColumnOptions.fieldName",(newName: string, oldName: string) => {
                                    if (newName !== oldName) {
                                        debugger;
                                        if (!isOriginalElementAutoGenerated && gridColumn) {
                                            gridConfiguration.debugMode && log("Changes detected. Unregistering column " + oldName);
                                            identityScope.gridRow.unregisterCell(gridColumn);
                                        }
                                        gridColumn = null;

                                        gridConfiguration.debugMode && log("Changes detected. Registering updated column " + newName);
                                        gridColumn = identityScope.gridRow.registerCell(identityScope);
                                    }
                                });

                                // in case of standard columns, compile them and add them by hand
                                if (!identityScope.gridColumnOptions.isCustomized) {
                                    var standardCellTemplate = angular.element(gridConfiguration.templates.cellHeaderStandard);
                                    //instanceElement.empty();
                                    instanceElement.append(standardCellTemplate);
                                    $compile(standardCellTemplate)(identityScope);                                    
                                }

                                // watch the scope and unregister the column
                                identityScope.$watch("$destroy",() => {
                                    debugger;

                                    if (!identityScope.gridColumnOptions.isAutoGenerated) {
                                        gridConfiguration.debugMode && log("Scope destroyed. Unregistering column " + gridColumn.fieldName);
                                        identityScope.gridRow.unregisterCell(gridColumn);
                                        gridColumn = null;
                                    }
                                });

                            },
                            post(identityScope: IGridIdentityColumnScope, instanceElement: ng.IAugmentedJQuery, tAttrs: ng.IAttributes, gridController: GridController, transcludeFn: ng.ITranscludeFunction) {
                            }
                        };
                    }
                };
            }
        ]);

}