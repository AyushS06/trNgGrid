module TrNgGrid {
    export interface IGridSectionScope extends ng.IScope {
        gridOptions: IGridOptions;
        gridLayoutSection: GridLayoutSection;
    }

    export interface IGridRowScope extends IGridSectionScope {
        gridLayoutRow: GridLayoutRow;
        gridLayoutRowColumns: Array<IGridColumnOptions>;
    }

    export interface IGridColumnScope extends IGridRowScope {
        gridColumnOptions: IGridColumnOptions;
        gridColumnLayout: IGridColumnLayoutOptions;
    }

    export interface IGridColumnSetup extends IGridColumnOptions, IGridColumnLayoutOptions {        
    }

    export interface IGridColumnSetupScope extends IGridColumnScope {
        gridColumnSetup: IGridColumnSetup;
    }

    /*
     * Set up the scope for the THEAD section
     */
    gridModule.directive(Constants.headerDirective, [
        () => {
            return {
                restrict: 'A',
                scope: true,
                require: "^" + Constants.tableDirective,
                link: {
                    pre(scope: IGridSectionScope, instanceElement: ng.IAugmentedJQuery, tAttrs: ng.IAttributes, gridController: GridController, transcludeFn: ng.ITranscludeFunction) {
                        scope.gridOptions = gridController.gridOptions;
                        scope.gridLayoutSection = gridController.gridLayout.getSection(GridSectionType.Header);
                    }
                }
            }
        }
    ]);

    /*
    * Set up the row scope for the THEAD section
    */
    gridModule.directive(Constants.headerRowDirective, [
        () => {
            return {
                restrict: 'A',
                scope: true,
                require: "^" + Constants.tableDirective,
                link: {
                    pre(scope: IGridRowScope, instanceElement: ng.IAugmentedJQuery, tAttrs: ng.IAttributes, gridController: GridController, transcludeFn: ng.ITranscludeFunction) {
                        scope.gridLayoutRow = scope.gridLayoutSection.registerRow();
                        scope.gridLayoutRowColumns = scope.gridLayoutRow.cells;
                        scope.$on("$destroy",() => {
                            debugger;
                            scope.gridLayoutSection.unregisterRow(scope.gridLayoutRow);
                        });
                    }
                }
            }
        }
    ]);

    export class GridColumnSetupController
    {        
        constructor() {            
        }
    }

    /*
     * Ensure the columns settings are extracted from the TH elements, and also ensure the scope is properly set.
     */
    gridModule.directive(Constants.cellHeaderDirective, ["$compile", Constants.gridConfigurationService, 
            ($compile: ng.ICompileService, gridConfiguration: IGridConfiguration) => {

                return {
                    restrict: 'A',
                    require: "^" + Constants.tableDirective,
                    controller: [GridColumnSetupController],
                    bindToController: true,
                    scope: {
                        isCustomized: "@" + Constants.dataColumnIsCustomizedField,
                        isAutoGenerated: "@" + Constants.dataColumnIsAutoGeneratedField,

                        fieldName: "@",
                        displayName: "@",
                        displayAlign: "@",
                        displayFormat: "@",
                        enableSorting: "@",
                        enableFiltering: "@",
                        cellWidth: "@",
                        cellHeight: "@",
                        filter: "@",
                        colspan: "@"                        
                    },
                    transclude: 'element',
                    replace:true,
                    controllerAs: "gridColumnSetup",
                    compile(templateElement: ng.IAugmentedJQuery, tAttrs: ng.IAttributes) {
                        var columnOptions: IGridColumnOptions;
                        var layoutOptions: IGridColumnLayoutOptions;

                        return {
                            pre(cellSetupScope: IGridColumnSetupScope, instanceElement: ng.IAugmentedJQuery, tAttrs: ng.IAttributes, gridController: GridController, transcludeFn: ng.ITranscludeFunction) {

                            },
                            post(cellSetupScope: IGridColumnSetupScope, instanceElement: ng.IAugmentedJQuery, tAttrs: ng.IAttributes, gridController: GridController, transcludeFn: ng.ITranscludeFunction) {

                                var setupColumn = (newSettings: IGridColumnSetup, oldSettings: IGridColumnSetup) => {
                                    if (angular.equals(newSettings, oldSettings)) {
                                        return;
                                    }

                                    columnOptions = {
                                        fieldName: newSettings.fieldName,
                                        displayName: newSettings.displayName,
                                        displayAlign: newSettings.displayAlign,
                                        displayFormat: newSettings.displayFormat,
                                        enableSorting: newSettings.enableSorting,
                                        enableFiltering: newSettings.enableSorting,
                                        cellWidth: newSettings.cellWidth,
                                        cellHeight: newSettings.cellHeight,
                                        filter: newSettings.filter
                                    };
                                    gridController.setColumnOptions(columnOptions);

                                    layoutOptions = {
                                        fieldName: columnOptions.fieldName,
                                        isAutoGenerated: newSettings.isAutoGenerated,
                                        isCustomized: newSettings.isCustomized,
                                        isLinkedToField: columnOptions.isLinkedToField
                                    };

                                    if (!newSettings.isAutoGenerated) {
                                        // we are guided by the auto cell registration, we do not register new ones
                                        (<IGridRowScope>(cellSetupScope.$parent)).gridLayoutRow.registerCell(layoutOptions);
                                    }
                                };

                                //cellSetupScope.$watch("gridColumnSetup", setupColumn);

                                setupColumn(cellSetupScope.gridColumnSetup, {});

                                //cellSetupScope.gridColumnOptions = columnOptions;
                                //cellSetupScope.gridColumnLayout = layoutOptions;

                                var transcludedElement = transcludeFn((cloneElement: ng.IAugmentedJQuery, transcludedScope: IGridColumnScope) => {
                                    transcludedScope.gridColumnOptions = columnOptions;
                                    transcludedScope.gridColumnLayout = layoutOptions;
                                    instanceElement.after(cloneElement);

                                    if (!layoutOptions.isCustomized) {
                                        var standardColumnTemplate = angular.element(gridConfiguration.templates.cellHeaderStandard);
                                        //clone.empty();
                                        //cloneElement.append(standardColumnTemplate);
                                        $compile(standardColumnTemplate)(transcludedScope);
                                    }
                                });

                                //instanceElement.replaceWith(transcludedElement);
                            }
                        };
                    }
                };
            }
        ]);

}