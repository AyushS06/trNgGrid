module TrNgGrid {
    export interface IGridColumnOptions {
        displayName?: string;
        displayAlign?: string;
        displayFormat?: string;
        enableSorting?: boolean;
        enableFiltering?: boolean;
        cellWidth?: string;
        cellHeight?: string;
        filter?: string;

        displayFieldName?: string;
        columnTitle?:string;
    }

    export interface IGridColumnIdentity {
        fieldName: string;
        rowIndex: number;
        batchIndex: number;
        isCustomized?: boolean;
        isAutoGenerated?: boolean;
    }

    export interface IGridColumnIdentityScope extends ng.IScope, IGridColumnIdentity, IGridColumnOptions {
    }

    export interface IGridScope extends ng.IScope {
        grid: GridController;
        gridOptions: IGridOptions;
    }

    export interface IGridColumnScope extends IGridScope {
        gridColumnOptions: IGridColumnOptions;
    }

    /*
     * Set up the scope for the THEAD section
     */
    gridModule.directive(Constants.headerDirective, [
        () => {
            return {
                restrict: 'A',
                require: "^" + Constants.tableDirective,
                link: {
                    pre(scope: IGridScope, instanceElement: ng.IAugmentedJQuery, tAttrs: ng.IAttributes, gridController: GridController, transcludeFn: ng.ITranscludeFunction) {
                        scope.grid = gridController;
                        scope.gridOptions = gridController.gridOptions;
                    }
                }
            }
        }
    ]);

    /*
     * Ensure the columns settings are extracted from the TH elements, and also ensure the scope is properly set.
     */
    gridModule.directive(Constants.cellHeaderDirective, [
            () => {
                return {
                    restrict: 'A',
                    require: "^" + Constants.tableDirective,
                    transclude: true,
                    scope: {
                        rowIndex: "@" + Constants.dataColumnRowIndexField,
                        batchIndex: "@" + Constants.dataColumnBatchIndexField,
                        isCustomized: "@" + Constants.dataColumnIsCustomizedField,
                        isAutoGenerated: "@" + Constants.dataColumnIsAutoGeneratedField,

                        fieldName: "@",
                        displayName: "@",
                        displayAlign: "@",
                        displayFormat: "@",
                        enableSorting: "@",
                        enableFiltering: "@",
                        cellWidth: "@",
                        cellHeight: "@",
                        filter: "@"
                    },
                    compile(templateElement: ng.IAugmentedJQuery, tAttrs: ng.IAttributes) {
                        var gridColumn: IGridColumn = null;
                        return {
                            pre(identityScope: IGridColumnIdentityScope, instanceElement: ng.IAugmentedJQuery, tAttrs: ng.IAttributes, gridController: GridController, transcludeFn: ng.ITranscludeFunction) {
                                // the display field name is a safe property name for the displayed item
                                identityScope.displayFieldName = identityScope.fieldName
                                    ? identityScope.fieldName.replace(/[\.\[\]]/g, "_") : null;

                                gridColumn = gridController.setColumn(
                                    GridEntitySection.Header,
                                    {
                                        fieldName: identityScope.fieldName,
                                        batchIndex: identityScope.batchIndex,
                                        rowIndex: identityScope.rowIndex,
                                        isAutoGenerated: identityScope.isAutoGenerated,
                                        isCustomized: identityScope.isCustomized
                                    },
                                    identityScope);

                                // set up the column title and ensure the displayName attribute is being monitored for changes
                                identityScope.$watch("displayName", () => {
                                    var newColumnTitle: string;
                                    if (gridColumn.options.displayName) {
                                        newColumnTitle = gridColumn.options.displayName;
                                    } else if (!gridColumn.identity.fieldName) {
                                        newColumnTitle = "[Invalid Field Name]";
                                    } else {
                                        // exclude nested notations
                                        var splitFieldName = gridColumn.identity.fieldName.match(/^[^\.\[\]]*/);

                                        // split by camel-casing
                                        splitFieldName = splitFieldName[0].split(/(?=[A-Z])/);
                                        if (splitFieldName.length && splitFieldName[0].length) {
                                            splitFieldName[0] = splitFieldName[0][0].toLocaleUpperCase() + splitFieldName[0].substr(1);
                                        }
                                        newColumnTitle = splitFieldName.join(" ");
                                    }

                                    gridColumn.options.columnTitle = newColumnTitle;
                                });

                                // we've extracted our settings, now transclude the element with the transclusion scope which is a sibling of our isolated scope
                                transcludeFn((clone: ng.IAugmentedJQuery, transcludedScope: IGridColumnScope) => {
                                    transcludedScope.gridColumnOptions = gridColumn.options;
                                    instanceElement.replaceWith(clone);
                                });

                                // the destruction of this scope means our column was removed
                                gridController.removeColumn(GridEntitySection.Header, gridColumn.identity);
                            },
                            post(identityScope: IGridColumnIdentityScope, instanceElement: ng.IAugmentedJQuery, tAttrs: ng.IAttributes, gridController: GridController, transcludeFn: ng.ITranscludeFunction) {
                            }
                        };
                    }
                };
            }
        ]);

}