var TrNgGrid;
(function (TrNgGrid) {
    (function (GridSectionType) {
        GridSectionType[GridSectionType["Enforced"] = 0] = "Enforced";
        GridSectionType[GridSectionType["Header"] = 1] = "Header";
        GridSectionType[GridSectionType["Body"] = 2] = "Body";
        GridSectionType[GridSectionType["Footer"] = 3] = "Footer";
    })(TrNgGrid.GridSectionType || (TrNgGrid.GridSectionType = {}));
    var GridSectionType = TrNgGrid.GridSectionType;
    var DefaultGridColumnLayoutOptions = (function () {
        function DefaultGridColumnLayoutOptions() {
            this.fieldName = undefined;
            this.colspan = undefined;
            this.isCustomized = undefined;
            this.isAutoGenerated = undefined;
            this.isLinkedToField = undefined;
            this.isDeactivated = undefined;
            this.placeholder = undefined;
        }
        return DefaultGridColumnLayoutOptions;
    })();
    TrNgGrid.DefaultGridColumnLayoutOptions = DefaultGridColumnLayoutOptions;
    var GridLayoutRow = (function () {
        function GridLayoutRow(gridConfiguration, loggingService, gridLayout, gridSectionType) {
            this.gridConfiguration = gridConfiguration;
            this.loggingService = loggingService;
            this.gridLayout = gridLayout;
            this.gridSectionType = gridSectionType;
            this.cells = [];
        }
        GridLayoutRow.prototype.swapCells = function (firstCellIndex, secondCellIndex) {
            var firstCell = this.cells[firstCellIndex];
            var secondCell = this.cells[secondCellIndex];
            this.gridConfiguration.debugMode && this.loggingService.log("About to swap cells [" + firstCell.fieldName + "] and [" + secondCell.fieldName + "] in section " + this.gridSectionType, this);
            this.cells.splice(firstCellIndex, 1, secondCell);
            this.cells.splice(secondCellIndex, 1, firstCell);
        };
        GridLayoutRow.prototype.findCell = function (fieldName) {
            for (var cellIndex = 0; cellIndex < this.cells.length; cellIndex++) {
                if (this.cells[cellIndex].fieldName === fieldName) {
                    return this.cells[cellIndex];
                }
            }
            return null;
        };
        GridLayoutRow.prototype.registerCell = function (cell, index) {
            if (!cell.fieldName) {
                throw 'A field name was not provided';
            }
            var cellFound = false;
            if (index === undefined) {
                for (var cellIndex = 0; (cellIndex < this.cells.length) && (!cellFound); cellIndex++) {
                    if (this.cells[cellIndex].fieldName === cell.fieldName) {
                        this.gridConfiguration.debugMode && this.loggingService.log("A layout cell [", cell.fieldName, cell, "] is about to be updated in section ", this.gridSectionType, this);
                        this.cells[cellIndex] = cell;
                        cellFound = true;
                    }
                }
            }
            if (!cellFound) {
                this.gridConfiguration.debugMode && this.loggingService.log("A new layout cell [", cell.fieldName, cell, "] is about to be registered in section ", this.gridSectionType, this);
                if (index === undefined || index === this.cells.length) {
                    this.cells.push(cell);
                }
                else {
                    this.cells.splice(index, 0, cell);
                }
            }
            this.gridLayout.triggerReconciliation();
        };
        GridLayoutRow.prototype.unregisterCell = function (cell) {
            for (var cellIndex = 0; cellIndex < this.cells.length; cellIndex++) {
                if (this.cells[cellIndex] === cell) {
                    debugger;
                    this.gridConfiguration.debugMode && this.loggingService.log("A layout cell [", cell, "] is about to get unregistered in section ", this);
                    this.cells.splice(cellIndex, 1);
                    this.gridLayout.triggerReconciliation();
                    return;
                }
            }
        };
        return GridLayoutRow;
    })();
    TrNgGrid.GridLayoutRow = GridLayoutRow;
    var GridLayoutSection = (function () {
        function GridLayoutSection(gridConfiguration, loggingService, gridLayout, gridSectionType) {
            this.gridConfiguration = gridConfiguration;
            this.loggingService = loggingService;
            this.gridLayout = gridLayout;
            this.gridSectionType = gridSectionType;
            this.rows = [];
        }
        GridLayoutSection.prototype.registerRow = function () {
            var row = new GridLayoutRow(this.gridConfiguration, this.loggingService, this.gridLayout, this.gridSectionType);
            this.rows.push(row);
            this.gridConfiguration.debugMode && this.loggingService.log("A new layout row [", row, "] was registered in section ", this);
            this.gridLayout.triggerReconciliation();
            return row;
        };
        GridLayoutSection.prototype.unregisterRow = function (row) {
            for (var rowIndex = 0; rowIndex < this.rows.length; rowIndex++) {
                if (this.rows[rowIndex] === row) {
                    this.rows.splice(rowIndex, 1);
                    this.gridConfiguration.debugMode && this.loggingService.log("A layout row [", row, "] was unregistered from section ", this);
                    this.gridLayout.triggerReconciliation();
                    return;
                }
            }
        };
        GridLayoutSection.prototype.clear = function () {
            this.rows.splice(0);
            this.gridConfiguration.debugMode && this.loggingService.log("Layout section ", this, " got cleared");
            this.gridLayout.triggerReconciliation();
        };
        return GridLayoutSection;
    })();
    TrNgGrid.GridLayoutSection = GridLayoutSection;
    var GridLayout = (function () {
        function GridLayout(gridConfiguration, loggingService, gridOptions) {
            this.gridConfiguration = gridConfiguration;
            this.loggingService = loggingService;
            this.gridOptions = gridOptions;
            this.sections = new Array(2 /* Body */ + 1);
            this.reconciliationTriggerKey = "triggerGridReconciliation";
            this.reconciling = false;
            this.setupListeners();
        }
        GridLayout.prototype.getSection = function (section) {
            var colSection = this.sections[section];
            if (!colSection) {
                this.sections[section] = colSection = new GridLayoutSection(this.gridConfiguration, this.loggingService, this, section);
                this.gridConfiguration.debugMode && this.loggingService.log("A new layout section [" + section + "] was registered");
                this.triggerReconciliation();
            }
            return colSection;
        };
        GridLayout.prototype.triggerReconciliation = function () {
            this.gridOptions[this.reconciliationTriggerKey] = true;
        };
        GridLayout.prototype.setupListeners = function () {
            var _this = this;
            this.gridOptions.$watch(this.reconciliationTriggerKey, function (reconciliationTriggered) {
                if (reconciliationTriggered) {
                    _this.gridOptions.$applyAsync(function () {
                        _this.reconcile();
                    });
                }
            });
            var itemsFieldExtractionWatcherDereg = null;
            itemsFieldExtractionWatcherDereg = this.gridOptions.$watch("items.length", function (newLength) {
                if (newLength) {
                    _this.enforceFields(TrNgGrid.extractFields(_this.gridOptions.items[0]));
                    if (itemsFieldExtractionWatcherDereg) {
                        itemsFieldExtractionWatcherDereg();
                        itemsFieldExtractionWatcherDereg = null;
                    }
                }
            });
            if (this.gridOptions.fields) {
                this.enforceFields(this.gridOptions.fields);
                if (itemsFieldExtractionWatcherDereg) {
                    itemsFieldExtractionWatcherDereg();
                    itemsFieldExtractionWatcherDereg = null;
                }
            }
            this.gridOptions.$watchCollection("fields", function (newFields, oldFields) {
                if (!angular.equals(newFields, oldFields)) {
                    _this.enforceFields(newFields || []);
                    if (itemsFieldExtractionWatcherDereg) {
                        itemsFieldExtractionWatcherDereg();
                        itemsFieldExtractionWatcherDereg = null;
                    }
                }
            });
        };
        GridLayout.prototype.enforceFields = function (fields) {
            var enforcedSection = this.getSection(0 /* Enforced */);
            if (fields) {
                enforcedSection.clear();
                var enforcedSectionVirtualRow = enforcedSection.registerRow();
                angular.forEach(fields, function (fieldName) {
                    var enforcedCellLayout = new DefaultGridColumnLayoutOptions();
                    enforcedCellLayout.fieldName = fieldName;
                    enforcedCellLayout.isAutoGenerated = true;
                    enforcedCellLayout.isLinkedToField = true;
                    enforcedSectionVirtualRow.registerCell(enforcedCellLayout);
                });
            }
            else {
                enforcedSection.clear();
            }
        };
        GridLayout.prototype.reconcile = function () {
            var _this = this;
            try {
                this.gridConfiguration.debugMode && this.loggingService.log("Starting to reconcile all the rows");
                var extractedFieldNames = new Array();
                var sectionIndex;
                for (sectionIndex = 0 /* Enforced */; sectionIndex <= 1 /* Header */ && extractedFieldNames.length === 0; sectionIndex++) {
                    angular.forEach(this.getSection(sectionIndex).rows, function (row) {
                        angular.forEach(row.cells, function (cell) {
                            if (cell.isLinkedToField) {
                                extractedFieldNames.push(cell.fieldName);
                            }
                        });
                    });
                }
                ;
                var preparedRows = new Array();
                for (sectionIndex = 0 /* Enforced */; sectionIndex <= 2 /* Body */; sectionIndex++) {
                    angular.forEach(this.getSection(sectionIndex).rows, function (row) {
                        if (sectionIndex !== 0 /* Enforced */) {
                            _this.cleanupRowForReconciliation(row, extractedFieldNames);
                        }
                        preparedRows.push(row);
                    });
                }
                ;
                for (var rowIndex = 0; rowIndex < preparedRows.length - 1; rowIndex++) {
                    this.reconcileRows(preparedRows[rowIndex], preparedRows[rowIndex + 1]);
                }
            }
            finally {
                this.gridOptions[this.reconciliationTriggerKey] = false;
            }
        };
        GridLayout.prototype.reconcileRows = function (enforcedRow, targetRow) {
            var currentTargetRowCellIndex = 0;
            for (var enforcedCellIndex = 0; enforcedCellIndex < enforcedRow.cells.length; enforcedCellIndex++) {
                var enforcedCell = enforcedRow.cells[enforcedCellIndex];
                if (enforcedCell.isDeactivated) {
                    continue;
                }
                var matchNotFound = true;
                var targetCell;
                for (var targetCellIndex = currentTargetRowCellIndex; matchNotFound && targetCellIndex < targetRow.cells.length; targetCellIndex++) {
                    targetCell = targetRow.cells[targetCellIndex];
                    if (targetCell && !targetCell.isDeactivated && targetCell.isLinkedToField == enforcedCell.isLinkedToField && (!targetCell.isLinkedToField || (targetCell.fieldName === enforcedCell.fieldName))) {
                        matchNotFound = false;
                    }
                }
                if (matchNotFound) {
                    targetCell = angular.extend({}, enforcedCell);
                    targetCell.isAutoGenerated = true;
                    targetCell.isCustomized = false;
                    targetRow.registerCell(targetCell, currentTargetRowCellIndex);
                }
                else {
                    targetCellIndex--;
                    if (targetCellIndex !== currentTargetRowCellIndex) {
                        targetRow.swapCells(targetCellIndex, currentTargetRowCellIndex);
                    }
                }
                currentTargetRowCellIndex++;
            }
            while (currentTargetRowCellIndex < targetRow.cells.length) {
                var extraCellRegistration = targetRow.cells[currentTargetRowCellIndex];
                if (extraCellRegistration.isAutoGenerated) {
                    targetRow.unregisterCell(extraCellRegistration);
                }
                else {
                    extraCellRegistration.isDeactivated = true;
                    currentTargetRowCellIndex++;
                }
            }
        };
        GridLayout.prototype.cleanupRowForReconciliation = function (targetRow, fields) {
            for (var cellRegistrationIndex = 0; cellRegistrationIndex < targetRow.cells.length; cellRegistrationIndex++) {
                var cellRegistration = targetRow.cells[cellRegistrationIndex];
                if (cellRegistration.isAutoGenerated) {
                    targetRow.unregisterCell(cellRegistration);
                    cellRegistrationIndex--;
                }
                else {
                    cellRegistration.isDeactivated = cellRegistration.isLinkedToField && (fields.indexOf(cellRegistration.fieldName) < 0);
                }
            }
        };
        return GridLayout;
    })();
    TrNgGrid.GridLayout = GridLayout;
    var GridColumnController = (function () {
        function GridColumnController() {
        }
        GridColumnController.prototype.prepareColumnSettingsScope = function (columnScope, settingsScope) {
            var _this = this;
            var isMonitoringLayoutUpdates = false;
            TrNgGrid.monitorScope(settingsScope, new TrNgGrid.GridConfigurationDefaultColumnOptions(), function (newOptions) {
                _this.registerColumnOptions(columnScope, newOptions);
                if (!isMonitoringLayoutUpdates) {
                    TrNgGrid.monitorScope(settingsScope, new DefaultGridColumnLayoutOptions(), function (newLayoutOptions) {
                        newLayoutOptions.isLinkedToField = columnScope.gridColumnOptions.isLinkedToField;
                        _this.registerColumnLayoutOptions(columnScope, newLayoutOptions);
                    });
                    isMonitoringLayoutUpdates = true;
                }
            });
        };
        GridColumnController.prototype.prepareAutoGeneratedColumnScope = function (columnScope) {
            if (!columnScope.gridColumnLayout) {
                throw "Expecting a grid column layout for the auto-generated cell";
            }
            columnScope.gridColumnOptions = columnScope.grid.getColumnOptions(columnScope.gridColumnLayout.fieldName);
            if (!columnScope.gridColumnOptions) {
                columnScope.gridColumnOptions = { fieldName: columnScope.gridColumnLayout.fieldName };
                columnScope.grid.setColumnOptions(columnScope.gridColumnOptions);
            }
        };
        GridColumnController.prototype.registerColumnOptions = function (columnScope, updatedColumnOptions) {
            updatedColumnOptions = columnScope.grid.setColumnOptions(updatedColumnOptions);
            columnScope.gridColumnOptions = updatedColumnOptions;
        };
        GridColumnController.prototype.registerColumnLayoutOptions = function (columnScope, updatedLayoutOptions) {
            if (updatedLayoutOptions.isAutoGenerated) {
                updatedLayoutOptions = columnScope.gridLayoutRow.findCell(updatedLayoutOptions.fieldName);
            }
            else {
                columnScope.gridLayoutRow.registerCell(updatedLayoutOptions);
            }
            columnScope.gridColumnLayout = updatedLayoutOptions;
        };
        return GridColumnController;
    })();
    TrNgGrid.GridColumnController = GridColumnController;
})(TrNgGrid || (TrNgGrid = {}));
