var TrNgGrid;
(function (TrNgGrid) {
    TrNgGrid.gridModule.directive(TrNgGrid.Constants.headerDirective, [
        function () {
            return {
                restrict: 'A',
                require: "^" + TrNgGrid.Constants.tableDirective,
                link: {
                    pre: function (scope, instanceElement, tAttrs, gridController, transcludeFn) {
                        scope.grid = gridController;
                        scope.gridOptions = gridController.gridOptions;
                    }
                }
            };
        }
    ]);
    TrNgGrid.gridModule.directive(TrNgGrid.Constants.cellHeaderDirective, [
        function () {
            return {
                restrict: 'A',
                require: "^" + TrNgGrid.Constants.tableDirective,
                transclude: true,
                scope: {
                    rowIndex: "@" + TrNgGrid.Constants.dataColumnRowIndexField,
                    batchIndex: "@" + TrNgGrid.Constants.dataColumnBatchIndexField,
                    isCustomized: "@" + TrNgGrid.Constants.dataColumnIsCustomizedField,
                    isAutoGenerated: "@" + TrNgGrid.Constants.dataColumnIsAutoGeneratedField,
                    fieldName: "@",
                    displayName: "@",
                    displayAlign: "@",
                    displayFormat: "@",
                    enableSorting: "@",
                    enableFiltering: "@",
                    cellWidth: "@",
                    cellHeight: "@",
                    filter: "@"
                },
                compile: function (templateElement, tAttrs) {
                    var gridColumn = null;
                    return {
                        pre: function (identityScope, instanceElement, tAttrs, gridController, transcludeFn) {
                            identityScope.displayFieldName = identityScope.fieldName ? identityScope.fieldName.replace(/[\.\[\]]/g, "_") : null;
                            gridColumn = gridController.setColumn(TrNgGrid.GridEntitySection.Header, {
                                fieldName: identityScope.fieldName,
                                batchIndex: identityScope.batchIndex,
                                rowIndex: identityScope.rowIndex,
                                isAutoGenerated: identityScope.isAutoGenerated,
                                isCustomized: identityScope.isCustomized
                            }, identityScope);
                            identityScope.$watch("displayName", function () {
                                var newColumnTitle;
                                if (gridColumn.options.displayName) {
                                    newColumnTitle = gridColumn.options.displayName;
                                }
                                else if (!gridColumn.identity.fieldName) {
                                    newColumnTitle = "[Invalid Field Name]";
                                }
                                else {
                                    var splitFieldName = gridColumn.identity.fieldName.match(/^[^\.\[\]]*/);
                                    splitFieldName = splitFieldName[0].split(/(?=[A-Z])/);
                                    if (splitFieldName.length && splitFieldName[0].length) {
                                        splitFieldName[0] = splitFieldName[0][0].toLocaleUpperCase() + splitFieldName[0].substr(1);
                                    }
                                    newColumnTitle = splitFieldName.join(" ");
                                }
                                gridColumn.options.columnTitle = newColumnTitle;
                            });
                            transcludeFn(function (clone, transcludedScope) {
                                transcludedScope.gridColumnOptions = gridColumn.options;
                                instanceElement.replaceWith(clone);
                            });
                            gridController.removeColumn(TrNgGrid.GridEntitySection.Header, gridColumn.identity);
                        },
                        post: function (identityScope, instanceElement, tAttrs, gridController, transcludeFn) {
                        }
                    };
                }
            };
        }
    ]);
})(TrNgGrid || (TrNgGrid = {}));
