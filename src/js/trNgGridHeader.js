var TrNgGrid;
(function (TrNgGrid) {
    TrNgGrid.gridModule.directive(TrNgGrid.Constants.headerDirective, [
        function () {
            return {
                restrict: 'A',
                scope: true,
                require: "^" + TrNgGrid.Constants.tableDirective,
                link: {
                    pre: function (scope, instanceElement, tAttrs, gridController, transcludeFn) {
                        scope.gridOptions = gridController.gridOptions;
                        scope.gridLayoutSection = gridController.gridLayout.getSection(TrNgGrid.GridSectionType.Header);
                    }
                }
            };
        }
    ]);
    TrNgGrid.gridModule.directive(TrNgGrid.Constants.headerRowDirective, ["$compile", TrNgGrid.Constants.gridConfigurationService, function ($compile, gridConfiguration) {
        return {
            restrict: 'A',
            scope: true,
            require: "^" + TrNgGrid.Constants.tableDirective,
            compile: function ($templateElement, $tAttrs) {
                return {
                    pre: function ($scope, $instanceElement, $tAttrs, $controller, $transcludeFn) {
                        $scope.gridLayoutRow = $scope.gridLayoutSection.registerRow();
                        $scope.$on("$destroy", function () {
                            $scope.gridLayoutSection.unregisterRow($scope.gridLayoutRow);
                        });
                    },
                    post: function ($scope, $instanceElement, $tAttrs, $controller, $transcludeFn) {
                    }
                };
            }
        };
    }]);
    TrNgGrid.gridModule.directive(TrNgGrid.Constants.headerCellPlaceholderDirective, ["$compile", "$interpolate", TrNgGrid.Constants.gridConfigurationService, function ($compile, $interpolate, gridConfiguration) {
        var autoGeneratedCellTemplate = angular.element(gridConfiguration.templates.headerCellStandard);
        autoGeneratedCellTemplate.attr(TrNgGrid.Constants.headerCellDirectiveAttribute, "");
        autoGeneratedCellTemplate.attr(TrNgGrid.Constants.dataColumnIsAutoGeneratedAttribute, "true");
        return {
            restrict: 'A',
            require: "^" + TrNgGrid.Constants.tableDirective,
            transclude: "element",
            compile: function ($templatedElement, $tAttrs) {
                return {
                    pre: function ($scope, $instanceElement, $tAttrs, $controller, $transcludeFn) {
                        $scope.gridColumnLayout.placeholder = $instanceElement;
                    },
                    post: function ($scope, $instanceElement, $tAttrs, $controller, $transcludeFn) {
                        if ($scope.gridColumnLayout.isAutoGenerated) {
                            gridConfiguration.debugMode && TrNgGrid.log("Creating auto-generated column for field " + $scope.gridColumnLayout.fieldName);
                            var autoGeneratedPreCompilationElement = autoGeneratedCellTemplate.clone();
                            autoGeneratedPreCompilationElement.attr("data-field-name", $scope.gridColumnLayout.fieldName);
                            $instanceElement.after(autoGeneratedPreCompilationElement);
                            var autoGeneratedElementLinkingFct = $compile(autoGeneratedPreCompilationElement);
                            var autoGeneratedCell = autoGeneratedElementLinkingFct($scope);
                            $scope.$on("$destroy", function () {
                                debugger;
                                if (autoGeneratedCell) {
                                    autoGeneratedCell.remove();
                                    autoGeneratedCell = null;
                                }
                                if (autoGeneratedPreCompilationElement) {
                                    autoGeneratedPreCompilationElement.remove();
                                    autoGeneratedPreCompilationElement = null;
                                }
                            });
                        }
                    }
                };
            }
        };
    }]);
    TrNgGrid.gridModule.directive(TrNgGrid.Constants.headerCellDirective, ["$compile", TrNgGrid.Constants.gridConfigurationService, function ($compile, gridConfiguration) {
        return {
            restrict: 'A',
            require: ["^" + TrNgGrid.Constants.tableDirective, TrNgGrid.Constants.headerCellDirective],
            priority: 101,
            terminal: true,
            scope: true,
            controller: ["$interpolate", TrNgGrid.GridColumnSetupController],
            transclude: 'element',
            compile: function ($templateElement, $tAttrs) {
                return {
                    pre: function ($scope, $instanceElement, $tAttrs, $controllers, $transcludeFn) {
                    },
                    post: function ($scope, $instanceElement, $tAttrs, $controllers, $transcludeFn) {
                        debugger;
                        var gridController = $controllers[0];
                        var columnSetupController = $controllers[1];
                        columnSetupController.prepareColumn(gridController, $scope, $tAttrs);
                    }
                };
            }
        };
    }]);
})(TrNgGrid || (TrNgGrid = {}));
