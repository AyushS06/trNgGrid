var TrNgGrid;
(function (TrNgGrid) {
    TrNgGrid.gridModule.directive(TrNgGrid.Constants.headerDirective, [
        function () {
            return {
                restrict: 'A',
                scope: true,
                require: "^" + TrNgGrid.Constants.tableDirective,
                link: {
                    pre: function (scope, instanceElement, tAttrs, gridController, transcludeFn) {
                        scope.gridOptions = gridController.gridOptions;
                        scope.gridSection = gridController.gridLayout.getSection(TrNgGrid.GridSectionType.Header);
                    }
                }
            };
        }
    ]);
    TrNgGrid.gridModule.directive(TrNgGrid.Constants.headerRowDirective, [
        function () {
            return {
                restrict: 'A',
                scope: true,
                require: "^" + TrNgGrid.Constants.tableDirective,
                link: {
                    pre: function (scope, instanceElement, tAttrs, gridController, transcludeFn) {
                        scope.gridRow = scope.gridSection.registerRow();
                        scope.gridRowColumns = scope.gridRow.cells;
                        scope.$on("$destroy", function () {
                            debugger;
                            scope.gridSection.unregisterRow(scope.gridRow);
                        });
                    }
                }
            };
        }
    ]);
    var GridColumnIdentityController = (function () {
        function GridColumnIdentityController() {
        }
        return GridColumnIdentityController;
    })();
    TrNgGrid.GridColumnIdentityController = GridColumnIdentityController;
    TrNgGrid.gridModule.directive(TrNgGrid.Constants.cellHeaderDirective, ["$compile", TrNgGrid.Constants.gridConfigurationService, function ($compile, gridConfiguration) {
        return {
            restrict: 'A',
            require: "^" + TrNgGrid.Constants.tableDirective,
            controller: [GridColumnIdentityController],
            bindToController: {
                isCustomized: "@" + TrNgGrid.Constants.dataColumnIsCustomizedField,
                isAutoGenerated: "@" + TrNgGrid.Constants.dataColumnIsAutoGeneratedField,
                fieldName: "@",
                displayName: "@",
                displayAlign: "@",
                displayFormat: "@",
                enableSorting: "@",
                enableFiltering: "@",
                cellWidth: "@",
                cellHeight: "@",
                filter: "@",
                colspan: "@"
            },
            scope: true,
            controllerAs: "gridColumnOptions",
            compile: function (templateElement, tAttrs) {
                var gridColumn = null;
                var isOriginalElementAutoGenerated = false;
                return {
                    pre: function (identityScope, instanceElement, tAttrs, gridController, transcludeFn) {
                        isOriginalElementAutoGenerated = identityScope.gridColumnOptions.isAutoGenerated;
                        gridConfiguration.debugMode && TrNgGrid.log("Registering column " + identityScope.gridColumnOptions.fieldName);
                        identityScope.gridColumnOptions = gridColumn = identityScope.gridRow.registerCell(identityScope.gridColumnOptions);
                        identityScope.$watch("gridColumnOptions.fieldName", function (newName, oldName) {
                            if (newName !== oldName) {
                                debugger;
                                if (!isOriginalElementAutoGenerated && gridColumn) {
                                    gridConfiguration.debugMode && TrNgGrid.log("Changes detected. Unregistering column " + oldName);
                                    identityScope.gridRow.unregisterCell(gridColumn);
                                }
                                gridColumn = null;
                                gridConfiguration.debugMode && TrNgGrid.log("Changes detected. Registering updated column " + newName);
                                gridColumn = identityScope.gridRow.registerCell(identityScope);
                            }
                        });
                        if (!identityScope.gridColumnOptions.isCustomized) {
                            var standardCellTemplate = angular.element(gridConfiguration.templates.cellHeaderStandard);
                            instanceElement.append(standardCellTemplate);
                            $compile(standardCellTemplate)(identityScope);
                        }
                        identityScope.$watch("$destroy", function () {
                            debugger;
                            if (!identityScope.gridColumnOptions.isAutoGenerated) {
                                gridConfiguration.debugMode && TrNgGrid.log("Scope destroyed. Unregistering column " + gridColumn.fieldName);
                                identityScope.gridRow.unregisterCell(gridColumn);
                                gridColumn = null;
                            }
                        });
                    },
                    post: function (identityScope, instanceElement, tAttrs, gridController, transcludeFn) {
                    }
                };
            }
        };
    }]);
})(TrNgGrid || (TrNgGrid = {}));
