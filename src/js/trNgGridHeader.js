var TrNgGrid;
(function (TrNgGrid) {
    TrNgGrid.gridModule.directive(TrNgGrid.Constants.headerDirective, [
        function () {
            return {
                restrict: 'A',
                scope: true,
                require: "^" + TrNgGrid.Constants.tableDirective,
                link: {
                    pre: function (scope, instanceElement, tAttrs, gridController, transcludeFn) {
                        scope.gridOptions = gridController.gridOptions;
                        scope.gridLayoutSection = gridController.gridLayout.getSection(TrNgGrid.GridSectionType.Header);
                    }
                }
            };
        }
    ]);
    TrNgGrid.gridModule.directive(TrNgGrid.Constants.headerRowDirective, ["$compile", TrNgGrid.Constants.gridConfigurationService, function ($compile, gridConfiguration) {
        return {
            restrict: 'A',
            scope: true,
            require: "^" + TrNgGrid.Constants.tableDirective,
            compile: function ($templateElement, $tAttrs) {
                return {
                    pre: function ($scope, $instanceElement, $tAttrs, $controller, $transcludeFn) {
                        $scope.gridLayoutRow = $scope.gridLayoutSection.registerRow();
                        $scope.$on("$destroy", function () {
                            $scope.gridLayoutSection.unregisterRow($scope.gridLayoutRow);
                        });
                    },
                    post: function ($scope, $instanceElement, $tAttrs, $controller, $transcludeFn) {
                    }
                };
            }
        };
    }]);
    TrNgGrid.gridModule.directive(TrNgGrid.Constants.headerCellPlaceholderDirective, ["$compile", "$interpolate", TrNgGrid.Constants.gridConfigurationService, function ($compile, $interpolate, gridConfiguration) {
        return {
            restrict: 'A',
            require: "^" + TrNgGrid.Constants.tableDirective,
            transclude: "element",
            compile: function ($templatedElement, $tAttrs) {
                return {
                    pre: function ($scope, $instanceElement, $tAttrs, $controller, $transcludeFn) {
                        $scope.gridColumnLayout.placeholder = $instanceElement;
                    },
                    post: function ($scope, $instanceElement, $tAttrs, $controller, $transcludeFn) {
                        if ($scope.gridColumnLayout.isAutoGenerated) {
                            var autoGeneratedTemplateCell = angular.element(gridConfiguration.templates.headerCellStandard);
                            autoGeneratedTemplateCell.attr(TrNgGrid.Constants.headerCellDirectiveAttribute, "");
                            autoGeneratedTemplateCell.attr(TrNgGrid.Constants.dataColumnIsAutoGeneratedAttribute, "true");
                            autoGeneratedTemplateCell.attr("data-field-name", $scope.gridColumnLayout.fieldName);
                        }
                    }
                };
            }
        };
    }]);
    var GridColumnSetupController = (function () {
        function GridColumnSetupController() {
        }
        return GridColumnSetupController;
    })();
    TrNgGrid.GridColumnSetupController = GridColumnSetupController;
    TrNgGrid.gridModule.directive(TrNgGrid.Constants.headerCellDirective, ["$compile", TrNgGrid.Constants.gridConfigurationService, function ($compile, gridConfiguration) {
        return {
            restrict: 'A',
            require: "^" + TrNgGrid.Constants.tableDirective,
            controller: [GridColumnSetupController],
            transclude: 'element',
            terminal: true,
            scope: true,
            compile: function ($templateElement, $tAttrs) {
                var standardCellContentsElementLinkingFct = $compile(gridConfiguration.templates.headerCellContentsStandard);
                var columnOptions;
                var layoutOptions;
                return {
                    pre: function ($scope, $instanceElement, $tAttrs, $controller, $transcludeFn) {
                        var setupColumn = function (newSettings, oldSettings) {
                            if (angular.equals(newSettings, oldSettings)) {
                                return;
                            }
                            columnOptions = {
                                fieldName: newSettings.fieldName,
                                displayName: newSettings.displayName,
                                displayAlign: newSettings.displayAlign,
                                displayFormat: newSettings.displayFormat,
                                enableSorting: newSettings.enableSorting && newSettings.enableSorting.toString() === "true",
                                enableFiltering: newSettings.enableSorting && newSettings.enableSorting.toString() === "true",
                                cellWidth: newSettings.cellWidth,
                                cellHeight: newSettings.cellHeight,
                                filter: newSettings.filter
                            };
                            $controller.setColumnOptions(columnOptions);
                            layoutOptions = {
                                fieldName: columnOptions.fieldName,
                                isAutoGenerated: newSettings.isAutoGenerated && newSettings.isAutoGenerated.toString() === "true",
                                isCustomized: newSettings.isCustomized && newSettings.isCustomized.toString() === "true",
                                isLinkedToField: columnOptions.isLinkedToField
                            };
                            if (layoutOptions.isAutoGenerated) {
                                layoutOptions = $scope.gridLayoutRow.findCell(columnOptions.fieldName);
                            }
                            else {
                                $scope.gridLayoutRow.registerCell(layoutOptions);
                            }
                        };
                        setupColumn($tAttrs, null);
                        $scope.gridColumnLayout = layoutOptions;
                        $scope.gridColumnOptions = columnOptions;
                    },
                    post: function ($scope, $instanceElement, $tAttrs, $controller, $transcludeFn) {
                        var childScope = null;
                        var transcludedCellElement = null;
                        var setupNewScope = function () {
                            if (childScope) {
                                childScope.$destroy();
                                childScope = null;
                            }
                            if (transcludedCellElement) {
                                transcludedCellElement.remove();
                                transcludedCellElement = null;
                            }
                            childScope = $scope.$new();
                            if (layoutOptions.placeholder) {
                                $transcludeFn(childScope, function (newTranscludedCellElement) {
                                    transcludedCellElement = newTranscludedCellElement;
                                    layoutOptions.placeholder.after(transcludedCellElement);
                                    if (!layoutOptions.isCustomized) {
                                        standardCellContentsElementLinkingFct(childScope, function (newStandardCellContent) {
                                            newTranscludedCellElement.append(newStandardCellContent);
                                        });
                                    }
                                });
                            }
                        };
                        $scope.$watch("gridColumnLayout.placeholder", function (newPlaceholder, oldPlaceholder) {
                            if (newPlaceholder === oldPlaceholder) {
                                return;
                            }
                            setupNewScope();
                        });
                    }
                };
            }
        };
    }]);
})(TrNgGrid || (TrNgGrid = {}));
