var TrNgGrid;
(function (TrNgGrid) {
    TrNgGrid.gridModule.directive(TrNgGrid.Constants.headerDirective, [
        function () {
            return {
                restrict: 'A',
                scope: true,
                require: "^" + TrNgGrid.Constants.tableDirective,
                link: {
                    pre: function (scope, instanceElement, tAttrs, gridController, transcludeFn) {
                        scope.gridOptions = gridController.gridOptions;
                        scope.gridLayoutSection = gridController.gridLayout.getSection(TrNgGrid.GridSectionType.Header);
                    }
                }
            };
        }
    ]);
    TrNgGrid.gridModule.directive(TrNgGrid.Constants.headerRowDirective, [
        function () {
            return {
                restrict: 'A',
                scope: true,
                require: "^" + TrNgGrid.Constants.tableDirective,
                link: {
                    pre: function (scope, instanceElement, tAttrs, gridController, transcludeFn) {
                        scope.gridLayoutRow = scope.gridLayoutSection.registerRow();
                        scope.gridLayoutRowColumns = scope.gridLayoutRow.cells;
                        scope.$on("$destroy", function () {
                            debugger;
                            scope.gridLayoutSection.unregisterRow(scope.gridLayoutRow);
                        });
                    }
                }
            };
        }
    ]);
    var GridColumnSetupController = (function () {
        function GridColumnSetupController() {
        }
        return GridColumnSetupController;
    })();
    TrNgGrid.GridColumnSetupController = GridColumnSetupController;
    TrNgGrid.gridModule.directive(TrNgGrid.Constants.cellHeaderDirective, ["$compile", TrNgGrid.Constants.gridConfigurationService, function ($compile, gridConfiguration) {
        return {
            restrict: 'A',
            require: "^" + TrNgGrid.Constants.tableDirective,
            controller: [GridColumnSetupController],
            bindToController: true,
            scope: {
                isCustomized: "@" + TrNgGrid.Constants.dataColumnIsCustomizedField,
                isAutoGenerated: "@" + TrNgGrid.Constants.dataColumnIsAutoGeneratedField,
                fieldName: "@",
                displayName: "@",
                displayAlign: "@",
                displayFormat: "@",
                enableSorting: "@",
                enableFiltering: "@",
                cellWidth: "@",
                cellHeight: "@",
                filter: "@",
                colspan: "@"
            },
            transclude: 'element',
            replace: true,
            controllerAs: "gridColumnSetup",
            compile: function (templateElement, tAttrs) {
                var columnOptions;
                var layoutOptions;
                return {
                    pre: function (cellSetupScope, instanceElement, tAttrs, gridController, transcludeFn) {
                    },
                    post: function (cellSetupScope, instanceElement, tAttrs, gridController, transcludeFn) {
                        var setupColumn = function (newSettings, oldSettings) {
                            if (angular.equals(newSettings, oldSettings)) {
                                return;
                            }
                            columnOptions = {
                                fieldName: newSettings.fieldName,
                                displayName: newSettings.displayName,
                                displayAlign: newSettings.displayAlign,
                                displayFormat: newSettings.displayFormat,
                                enableSorting: newSettings.enableSorting,
                                enableFiltering: newSettings.enableSorting,
                                cellWidth: newSettings.cellWidth,
                                cellHeight: newSettings.cellHeight,
                                filter: newSettings.filter
                            };
                            gridController.setColumnOptions(columnOptions);
                            layoutOptions = {
                                fieldName: columnOptions.fieldName,
                                isAutoGenerated: newSettings.isAutoGenerated,
                                isCustomized: newSettings.isCustomized,
                                isLinkedToField: columnOptions.isLinkedToField
                            };
                            if (!newSettings.isAutoGenerated) {
                                (cellSetupScope.$parent).gridLayoutRow.registerCell(layoutOptions);
                            }
                        };
                        setupColumn(cellSetupScope.gridColumnSetup, {});
                        var transcludedElement = transcludeFn(function (cloneElement, transcludedScope) {
                            transcludedScope.gridColumnOptions = columnOptions;
                            transcludedScope.gridColumnLayout = layoutOptions;
                            instanceElement.after(cloneElement);
                            if (!layoutOptions.isCustomized) {
                                var standardColumnTemplate = angular.element(gridConfiguration.templates.cellHeaderStandard);
                                $compile(standardColumnTemplate)(transcludedScope);
                            }
                        });
                    }
                };
            }
        };
    }]);
})(TrNgGrid || (TrNgGrid = {}));
