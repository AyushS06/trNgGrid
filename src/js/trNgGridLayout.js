var TrNgGrid;
(function (TrNgGrid) {
    TrNgGrid.gridModule.directive(TrNgGrid.Constants.headerDirective, [
        function () {
            return {
                restrict: 'A',
                scope: true,
                require: "^" + TrNgGrid.Constants.tableDirective,
                link: {
                    pre: function (scope, instanceElement, tAttrs, gridController, transcludeFn) {
                        scope.grid = gridController;
                        scope.gridOptions = gridController.gridOptions;
                        scope.gridLayoutSection = gridController.gridLayout.getSection(TrNgGrid.GridSectionType.Header);
                    }
                }
            };
        }
    ]);
    TrNgGrid.gridModule.directive(TrNgGrid.Constants.rowDirective, ["$compile", TrNgGrid.Constants.gridConfigurationService, function ($compile, gridConfiguration) {
        return {
            restrict: 'A',
            scope: true,
            require: "^" + TrNgGrid.Constants.tableDirective,
            compile: function ($templateElement, $tAttrs) {
                return {
                    pre: function ($scope, $instanceElement, $tAttrs, $controller, $transcludeFn) {
                        $scope.gridLayoutRow = $scope.gridLayoutSection.registerRow();
                        $scope.$on("$destroy", function () {
                            debugger;
                            $scope.gridLayoutSection.unregisterRow($scope.gridLayoutRow);
                        });
                    },
                    post: function ($scope, $instanceElement, $tAttrs, $controller, $transcludeFn) {
                    }
                };
            }
        };
    }]);
    TrNgGrid.gridModule.directive(TrNgGrid.Constants.cellPlaceholderDirective, ["$compile", "$interpolate", TrNgGrid.Constants.gridConfigurationService, function ($compile, $interpolate, gridConfiguration) {
        return {
            restrict: 'A',
            require: [TrNgGrid.Constants.cellPlaceholderDirective, "^" + TrNgGrid.Constants.tableDirective],
            controller: [TrNgGrid.GridColumnController],
            transclude: "element",
            compile: function ($templatedElement, $tAttrs) {
                return {
                    pre: function ($scope, $instanceElement, $tAttrs, $controllers, $transcludeFn) {
                        $scope.gridColumnLayout.placeholder = $instanceElement;
                    },
                    post: function ($scope, $instanceElement, $tAttrs, $controllers, $transcludeFn) {
                        var columnSetupController = $controllers[0];
                        if ($scope.gridColumnLayout.isAutoGenerated) {
                            columnSetupController.prepareAutoGeneratedColumnScope($scope);
                            var isDestroyed = false;
                            var autoGeneratedCellInstance = null;
                            var setupAutoGeneratedCell = function () {
                                if (autoGeneratedCellInstance) {
                                    gridConfiguration.debugMode && TrNgGrid.log("Removing auto-generated cell for field " + $scope.gridColumnLayout.fieldName);
                                    autoGeneratedCellInstance.remove();
                                    autoGeneratedCellInstance = null;
                                }
                                if ($scope.gridColumnLayout && $scope.gridColumnOptions) {
                                    gridConfiguration.debugMode && TrNgGrid.log("Creating auto-generated cell for field " + $scope.gridColumnLayout.fieldName);
                                    var autoGeneratedCellTemplate = angular.element(gridConfiguration.templates.headerCellStandard);
                                    autoGeneratedCellTemplate.append(angular.element(gridConfiguration.templates.headerCellContentsStandard));
                                    $instanceElement.after(autoGeneratedCellTemplate);
                                    autoGeneratedCellInstance = $compile(autoGeneratedCellTemplate)($scope);
                                }
                            };
                            $scope.$watchGroup(["gridColumnLayout", "gridColumnOptions"], function (newValues) {
                                setupAutoGeneratedCell();
                            });
                            $scope.$on("$destroy", function () {
                                debugger;
                                isDestroyed = true;
                                setupAutoGeneratedCell();
                                $scope.gridColumnLayout.placeholder = null;
                            });
                        }
                    }
                };
            }
        };
    }]);
    TrNgGrid.gridModule.directive(TrNgGrid.Constants.cellDirective, ["$compile", TrNgGrid.Constants.gridConfigurationService, function ($compile, gridConfiguration) {
        return {
            restrict: 'A',
            require: [TrNgGrid.Constants.cellDirective, "^" + TrNgGrid.Constants.tableDirective],
            controller: [TrNgGrid.GridColumnController],
            scope: {
                isCustomized: "@" + TrNgGrid.Constants.dataColumnIsCustomizedField,
                fieldName: "@",
                displayName: "@",
                displayAlign: "@",
                displayFormat: "@",
                enableSorting: "@",
                enableFiltering: "@",
                cellWidth: "@",
                cellHeight: "@",
                filter: "@",
                colspan: "@"
            },
            transclude: 'element',
            replace: true,
            template: '<td style="display:none"></td>',
            compile: function ($templateElement, $tAttrs) {
                return {
                    pre: function ($settingsScope, $instanceElement, $tAttrs, $controllers, $transcludeFn) {
                    },
                    post: function ($settingsScope, $instanceElement, $tAttrs, $controllers, $transcludeFn) {
                        var columnSetupController = $controllers[0];
                        var gridColumnScope = $settingsScope.$parent.$new();
                        debugger;
                        columnSetupController.prepareColumnSettingsScope(gridColumnScope, $settingsScope);
                        var transcludedCellElement = null;
                        var isDestroyed = false;
                        var setupTranscludedElement = function () {
                            if (transcludedCellElement) {
                                gridConfiguration.debugMode && TrNgGrid.log("Removing tanscluded cell for field " + gridColumnScope.gridColumnLayout.fieldName);
                                transcludedCellElement.remove();
                                transcludedCellElement = null;
                            }
                            if (!isDestroyed && gridColumnScope.gridColumnLayout && gridColumnScope.gridColumnLayout.placeholder && gridColumnScope.gridColumnOptions) {
                                gridConfiguration.debugMode && TrNgGrid.log("Transcluding and attaching cell for field " + gridColumnScope.gridColumnLayout.fieldName);
                                console.log($instanceElement);
                                debugger;
                                $transcludeFn(gridColumnScope, function (newTranscludedCellElement) {
                                    debugger;
                                    transcludedCellElement = newTranscludedCellElement;
                                    gridColumnScope.gridColumnLayout.placeholder.after(transcludedCellElement);
                                    if (!gridColumnScope.gridColumnLayout.isCustomized) {
                                        var standardCellContentsTemplate = angular.element(gridConfiguration.templates.headerCellContentsStandard);
                                        transcludedCellElement.append(standardCellContentsTemplate);
                                        $compile(standardCellContentsTemplate)(gridColumnScope);
                                    }
                                }, gridColumnScope.gridColumnLayout.placeholder.parent());
                            }
                        };
                        gridColumnScope.$watchGroup(["gridColumnLayout", "gridColumnOptions", "gridColumnLayout.placeholder"], function (newValues) {
                            setupTranscludedElement();
                        });
                        gridColumnScope.$on("$destroy", function () {
                            debugger;
                            isDestroyed = true;
                            setupTranscludedElement();
                        });
                    }
                };
            }
        };
    }]);
})(TrNgGrid || (TrNgGrid = {}));
