var TrNgGrid;
(function (TrNgGrid) {
    var Constants;
    (function (Constants) {
        Constants.tableDirective = "trNgGrid";
        Constants.tableDirectiveAttribute = "data-tr-ng-grid";
        Constants.dataColumnIsAutoGeneratedAttribute = Constants.tableDirectiveAttribute + "-auto-generated";
        Constants.dataColumnIsAutoGeneratedField = Constants.tableDirective + "AutoGenerated";
        Constants.dataColumnIsCustomizedAttribute = Constants.tableDirectiveAttribute + "-customized";
        Constants.dataColumnIsCustomizedField = Constants.tableDirective + "Customized";
        Constants.sortFilter = Constants.tableDirective + "SortFilter";
        Constants.dataPagingFilter = Constants.tableDirective + "DataPagingFilter";
        Constants.translateFilter = Constants.tableDirective + "TranslateFilter";
        Constants.dataFormattingFilter = Constants.tableDirective + "DataFormatFilter";
        Constants.defaultTranslationLocale = "default";
        Constants.bodyDirective = Constants.tableDirective + "Body";
        Constants.bodyDirectiveAttribute = Constants.tableDirectiveAttribute + "-body";
        Constants.bodyRowDirective = Constants.bodyDirective + "Row";
        Constants.bodyRowDirectiveAttribute = Constants.bodyDirectiveAttribute + "-row";
        Constants.headerDirective = Constants.tableDirective + "Header";
        Constants.headerDirectiveAttribute = Constants.tableDirectiveAttribute + "-header";
        Constants.headerRowDirective = Constants.headerDirective + "Row";
        Constants.headerRowDirectiveAttribute = Constants.headerDirectiveAttribute + "-row";
        Constants.footerDirective = Constants.tableDirective + "Footer";
        Constants.footerDirectiveAttribute = Constants.tableDirectiveAttribute + "-footer";
        Constants.globalFilterDirective = Constants.tableDirective + "GlobalFilter";
        Constants.globalFilterDirectiveAttribute = Constants.tableDirectiveAttribute + "-global-filter";
        Constants.pagerDirective = Constants.tableDirective + "Pager";
        Constants.pagerDirectiveAttribute = Constants.tableDirectiveAttribute + "-pager";
        Constants.headerCellDirective = Constants.tableDirective + "HeaderCell";
        Constants.headerCellDirectiveAttribute = Constants.tableDirectiveAttribute + "-header-cell";
        Constants.headerCellPlaceholderDirective = Constants.headerCellDirective + "Placeholder";
        Constants.headerCellPlaceholderDirectiveAttribute = Constants.headerCellDirectiveAttribute + "-placeholder";
        Constants.headerCellDirective = Constants.tableDirective + "HeaderCell";
        Constants.headerCellDirectiveAttribute = Constants.tableDirectiveAttribute + "-header-cell";
        Constants.bodyCellDirective = Constants.tableDirective + "BodyCell";
        Constants.bodyCellDirectiveAttribute = Constants.tableDirectiveAttribute + "-body-cell";
        Constants.footerCellDirective = Constants.tableDirective + "FooterCell";
        Constants.footerCellDirectiveAttribute = Constants.tableDirectiveAttribute + "-footer-cell";
        Constants.columnSortDirective = Constants.tableDirective + "ColumnSort";
        Constants.columnSortDirectiveAttribute = Constants.tableDirectiveAttribute + "-column-sort";
        Constants.columnFilterDirective = Constants.tableDirective + "ColumnFilter";
        Constants.columnFilterDirectiveAttribute = Constants.tableDirectiveAttribute + "-column-filter";
        Constants.gridConfigurationService = Constants.tableDirective + "Configuration";
        Constants.gridConfigurationProvider = Constants.gridConfigurationService + "Provider";
    })(Constants = TrNgGrid.Constants || (TrNgGrid.Constants = {}));
})(TrNgGrid || (TrNgGrid = {}));

var TrNgGrid;
(function (TrNgGrid) {
    function findChildByTagName(parent, childTag) {
        childTag = childTag.toUpperCase();
        var children = parent.children();
        for (var childIndex = 0; childIndex < children.length; childIndex++) {
            var childElement = children[childIndex];
            if (childElement.tagName === childTag) {
                return angular.element(childElement);
            }
        }
        return null;
    }
    TrNgGrid.findChildByTagName = findChildByTagName;
    ;
    function findChildIndex(child) {
        var parent = child.parent();
        var children = parent.children();
        var childIndex = 0;
        for (; childIndex < children.length && children[childIndex] === child[0]; childIndex++)
            ;
        return (childIndex >= children.length) ? -1 : childIndex;
    }
    TrNgGrid.findChildIndex = findChildIndex;
    ;
    function findChildrenByTagName(parent, childTag) {
        childTag = childTag.toUpperCase();
        var retChildren = new Array();
        var children = parent.children();
        for (var childIndex = 0; childIndex < children.length; childIndex++) {
            var childElement = children[childIndex];
            if (childElement.tagName === childTag) {
                retChildren.push(angular.element(childElement));
            }
        }
        return retChildren;
    }
    TrNgGrid.findChildrenByTagName = findChildrenByTagName;
    ;
    function wrapTemplatedCell(templateElement, cellTemplateDirective) {
        var childrenElements = templateElement.children();
        if (childrenElements.length !== 1 || !angular.element(childrenElements[0]).attr(cellTemplateDirective)) {
            var templateWrapElement = angular.element("<div>" + templateElement.html() + "</div>").attr(cellTemplateDirective, "");
            templateElement.empty();
            templateElement.append(templateWrapElement);
        }
    }
    TrNgGrid.wrapTemplatedCell = wrapTemplatedCell;
    ;
    function extractFields(data) {
        var fields = new Array();
        for (var fieldName in data) {
            fields.push(fieldName);
        }
        return fields;
    }
    TrNgGrid.extractFields = extractFields;
    function log(message) {
        console.log(TrNgGrid.Constants.tableDirective + "(" + new Date().getTime() + "): " + message);
    }
    TrNgGrid.log = log;
    ;
    function createRowElement() {
        return findChildByTagName(findChildByTagName(angular.element("<table><tbody><tr></tr></tbody></table>"), "tbody"), "tr");
    }
    TrNgGrid.createRowElement = createRowElement;
    function createCellElement(cellTagName) {
        return findChildByTagName(findChildByTagName(findChildByTagName(angular.element("<table><tbody><tr><" + cellTagName + "></" + cellTagName + "></tr></tbody></table>"), "tbody"), "tr"), cellTagName);
    }
    TrNgGrid.createCellElement = createCellElement;
    function fixGridCell(gridConfiguration, cellElement, cellTagName, cellElementDirectiveAttribute) {
        if (!cellElement) {
            cellElement = createCellElement(cellTagName);
            cellElement.attr(TrNgGrid.Constants.dataColumnIsAutoGeneratedAttribute, "true");
        }
        cellElement.attr(cellElementDirectiveAttribute, "");
        var cellChildrenElements = cellElement.children();
        var isCustomized = cellChildrenElements.length || ((cellElement.html().replace(/^\s+|\s+$/gm, '')));
        if (isCustomized && cellChildrenElements.length === 0) {
            var wrappedContent = angular.element("<div>" + cellElement.html() + "</div>");
            cellElement.empty();
            cellElement.append(wrappedContent);
        }
        if (isCustomized) {
            cellElement.attr(TrNgGrid.Constants.dataColumnIsCustomizedAttribute, "true");
        }
        return cellElement;
    }
    TrNgGrid.fixGridCell = fixGridCell;
    function fixGridSection(gridConfiguration, sectionElement, rowElementDirectiveAttribute, cellTagName, cellElementDirectiveAttribute) {
        var rowElement;
        var rowElements = findChildrenByTagName(sectionElement, "tr");
        if (!rowElements.length) {
            sectionElement.empty();
            rowElement = createRowElement();
            sectionElement.append(rowElement);
            rowElements.push(rowElement);
        }
        for (var rowIndex = 0; rowIndex < rowElements.length; rowIndex++) {
            rowElement = rowElements[rowIndex];
            rowElement.attr(rowElementDirectiveAttribute, "");
            var cellElements = findChildrenByTagName(rowElement, cellTagName);
            if (cellElements.length === 0 || !cellElements[0].attr(TrNgGrid.Constants.headerCellPlaceholderDirectiveAttribute)) {
                var placeholderTemplate = angular.element(gridConfiguration.templates.headerCellStandard);
                placeholderTemplate.attr("data-ng-repeat", "gridColumnLayout in (gridLayoutRow.cells)");
                placeholderTemplate.attr("data-ng-if", "!gridColumnLayout.isDeactivated");
                placeholderTemplate.attr(TrNgGrid.Constants.headerCellPlaceholderDirectiveAttribute, "");
                rowElement.prepend(placeholderTemplate);
            }
            for (var cellIndex = 0; cellIndex < cellElements.length; cellIndex++) {
                var cellElement = cellElements[cellIndex];
                fixGridCell(gridConfiguration, cellElement, cellTagName, cellElementDirectiveAttribute);
            }
        }
    }
    TrNgGrid.fixGridSection = fixGridSection;
    function fixTableStructure(gridConfiguration, gridElement) {
        var tableHeaderElement = findChildByTagName(gridElement, "thead");
        if (!tableHeaderElement) {
            tableHeaderElement = findChildByTagName(angular.element("<table><thead></thead></table"), "thead");
            gridElement.prepend(tableHeaderElement);
        }
        tableHeaderElement.attr(TrNgGrid.Constants.headerDirectiveAttribute, "");
        fixGridSection(gridConfiguration, tableHeaderElement, TrNgGrid.Constants.headerRowDirectiveAttribute, "th", TrNgGrid.Constants.headerCellDirectiveAttribute);
        var tableFooterElement = findChildByTagName(gridElement, "tfoot");
        if (!tableFooterElement) {
            tableFooterElement = findChildByTagName(angular.element("<table><tfoot></tfoot></table"), "tfoot");
            tableHeaderElement.after(tableFooterElement);
        }
        var tableBodyElement = findChildByTagName(gridElement, "tbody");
        if (!tableBodyElement) {
            tableBodyElement = findChildByTagName(angular.element("<table><tbody></tbody></table"), "tbody");
            tableFooterElement.after(tableBodyElement);
        }
        angular.forEach(gridElement.children, function (element) {
            if (element !== tableHeaderElement[0] || element !== tableBodyElement[0] || element !== tableFooterElement[0]) {
                angular.element(element).remove();
                gridConfiguration.debugMode && log("Invalid extra element found inside the grid template structure: " + element.tagName);
            }
        });
    }
    TrNgGrid.fixTableStructure = fixTableStructure;
})(TrNgGrid || (TrNgGrid = {}));

var TrNgGrid;
(function (TrNgGrid) {
    var unnamedFieldNameCount = 0;
    (function (SelectionMode) {
        SelectionMode[SelectionMode["None"] = 0] = "None";
        SelectionMode[SelectionMode["SingleRow"] = 1] = "SingleRow";
        SelectionMode[SelectionMode["MultiRow"] = 2] = "MultiRow";
        SelectionMode[SelectionMode["MultiRowWithKeyModifiers"] = 3] = "MultiRowWithKeyModifiers";
    })(TrNgGrid.SelectionMode || (TrNgGrid.SelectionMode = {}));
    var SelectionMode = TrNgGrid.SelectionMode;
    var IGridRow = (function () {
        function IGridRow() {
        }
        return IGridRow;
    })();
    TrNgGrid.IGridRow = IGridRow;
    var GridController = (function () {
        function GridController($compile, $parse, $timeout, gridConfiguration) {
            this.$compile = $compile;
            this.$parse = $parse;
            this.$timeout = $timeout;
            this.gridConfiguration = gridConfiguration;
            this.nonFieldNameTagIndex = 0;
            this.nonFieldNameFormat = "$$_trNgGridCustom_";
            this.gridColumns = {};
        }
        GridController.prototype.setGridOptions = function (gridOptions) {
            var _this = this;
            this.gridOptions = gridOptions;
            this.gridLayout = new TrNgGrid.GridLayout(this.gridConfiguration, this.gridOptions);
            if (this.gridOptions.onDataRequired) {
                var retrieveDataCallback = function () {
                    _this.dataRequestPromise = null;
                    _this.gridOptions.immediateDataRetrieval = false;
                    _this.gridOptions.onDataRequired(_this.gridOptions);
                };
                var scheduleDataRetrieval = function () {
                    if (_this.dataRequestPromise) {
                        _this.$timeout.cancel(_this.dataRequestPromise);
                        _this.dataRequestPromise = null;
                    }
                    if (_this.gridOptions.immediateDataRetrieval) {
                        retrieveDataCallback();
                    }
                    else {
                        _this.dataRequestPromise = _this.$timeout(function () {
                            retrieveDataCallback();
                        }, _this.gridOptions.onDataRequiredDelay, true);
                    }
                };
                this.gridOptions.$watch("currentPage", function (newValue, oldValue) {
                    if (newValue !== oldValue) {
                        scheduleDataRetrieval();
                    }
                });
                this.gridOptions.$watchCollection("[" + "filterBy, " + "filterByFields, " + "orderBy, " + "orderByReverse, " + "pageItems, " + "]", function () {
                    if (_this.gridOptions.currentPage !== 0) {
                        _this.gridOptions.currentPage = 0;
                        return;
                    }
                    scheduleDataRetrieval();
                });
                this.gridOptions.$watch("immediateDataRetrieval", function (newValue) {
                    if (newValue && _this.dataRequestPromise) {
                        _this.$timeout.cancel(_this.dataRequestPromise);
                        retrieveDataCallback();
                    }
                });
            }
            this.gridOptions.$watch("selectionMode", function (newValue, oldValue) {
                if (newValue !== oldValue) {
                    switch (newValue) {
                        case SelectionMode[0 /* None */]:
                            _this.gridOptions.selectedItems.splice(0);
                            break;
                        case SelectionMode[1 /* SingleRow */]:
                            if (_this.gridOptions.selectedItems.length > 1) {
                                _this.gridOptions.selectedItems.splice(1);
                            }
                            break;
                    }
                }
            });
        };
        GridController.prototype.setColumnOptions = function (columnOptions) {
            columnOptions.isLinkedToField = (!!columnOptions.fieldName) || (columnOptions.fieldName.indexOf(this.nonFieldNameFormat) < 0);
            if (!columnOptions.fieldName) {
                columnOptions.fieldName = this.nonFieldNameFormat + (this.nonFieldNameTagIndex++);
            }
            columnOptions.displayItemFieldName = columnOptions.fieldName.replace(/[^a-zA-Z]/g, "_");
            if (columnOptions.displayName) {
                columnOptions.columnTitle = columnOptions.displayName;
            }
            else if (columnOptions.isLinkedToField) {
                var rawTitle = columnOptions.fieldName.replace(/^([^\a-zA-Z]*)([\a-zA-Z]*)(.*)/g, "$2");
                var splitTitleName = rawTitle.split(/(?=[A-Z])/);
                if (splitTitleName.length && splitTitleName[0].length) {
                    splitTitleName[0] = splitTitleName[0][0].toLocaleUpperCase() + splitTitleName[0].substr(1);
                }
                columnOptions.columnTitle = splitTitleName.join(" ");
            }
            else {
                columnOptions.columnTitle = "";
            }
            columnOptions = this.gridColumns[columnOptions.fieldName] = angular.extend(this.gridColumns[columnOptions.fieldName] || {}, this.gridConfiguration.defaultColumnOptions, columnOptions);
            return columnOptions;
        };
        GridController.prototype.getColumnOptions = function (fieldName) {
            return this.gridColumns[fieldName];
        };
        GridController.prototype.speedUpAsyncDataRetrieval = function ($event) {
            if (!$event || $event.keyCode == 13) {
                this.gridOptions.immediateDataRetrieval = true;
            }
        };
        GridController.prototype.toggleSorting = function (propertyName) {
            if (this.gridOptions.orderBy != propertyName) {
                this.gridOptions.orderBy = propertyName;
            }
            else {
                this.gridOptions.orderByReverse = !this.gridOptions.orderByReverse;
            }
            this.speedUpAsyncDataRetrieval();
        };
        GridController.prototype.getFormattedFieldName = function (fieldName) {
        };
        GridController.prototype.setFilter = function (fieldName, filter) {
        };
        GridController.prototype.toggleItemSelection = function (filteredItems, item, $event) {
            if (this.gridOptions.selectionMode === SelectionMode[0 /* None */])
                return;
            switch (this.gridOptions.selectionMode) {
                case SelectionMode[3 /* MultiRowWithKeyModifiers */]:
                    if (!$event.ctrlKey && !$event.shiftKey && !$event.metaKey) {
                        var itemIndex = this.gridOptions.selectedItems.indexOf(item);
                        this.gridOptions.selectedItems.splice(0);
                        if (itemIndex < 0) {
                            this.gridOptions.selectedItems.push(item);
                        }
                    }
                    else {
                        if ($event.ctrlKey || $event.metaKey) {
                            var itemIndex = this.gridOptions.selectedItems.indexOf(item);
                            if (itemIndex >= 0) {
                                this.gridOptions.selectedItems.splice(itemIndex, 1);
                            }
                            else {
                                this.gridOptions.selectedItems.push(item);
                            }
                        }
                        else if ($event.shiftKey) {
                            if (document.selection && document.selection.empty) {
                                document.selection.empty();
                            }
                            else if (window.getSelection) {
                                var sel = window.getSelection();
                                sel.removeAllRanges();
                            }
                            var firstItemIndex;
                            var lastSelectedItem = this.gridOptions.selectedItems[this.gridOptions.selectedItems.length - 1];
                            for (firstItemIndex = 0; firstItemIndex < filteredItems.length && filteredItems[firstItemIndex].$$_gridItem !== lastSelectedItem; firstItemIndex++)
                                ;
                            if (firstItemIndex >= filteredItems.length) {
                                firstItemIndex = 0;
                            }
                            var lastItemIndex;
                            for (lastItemIndex = 0; lastItemIndex < filteredItems.length && filteredItems[lastItemIndex].$$_gridItem !== item; lastItemIndex++)
                                ;
                            if (lastItemIndex >= filteredItems.length) {
                                throw "Invalid selection on a key modifier selection mode";
                            }
                            if (lastItemIndex < firstItemIndex) {
                                var tempIndex = firstItemIndex;
                                firstItemIndex = lastItemIndex;
                                lastItemIndex = tempIndex;
                            }
                            for (var currentItemIndex = firstItemIndex; currentItemIndex <= lastItemIndex; currentItemIndex++) {
                                var currentItem = filteredItems[currentItemIndex].$$_gridItem;
                                if (this.gridOptions.selectedItems.indexOf(currentItem) < 0) {
                                    this.gridOptions.selectedItems.push(currentItem);
                                }
                            }
                        }
                    }
                    break;
                case SelectionMode[1 /* SingleRow */]:
                    var itemIndex = this.gridOptions.selectedItems.indexOf(item);
                    this.gridOptions.selectedItems.splice(0);
                    if (itemIndex < 0) {
                        this.gridOptions.selectedItems.push(item);
                    }
                    break;
                case SelectionMode[2 /* MultiRow */]:
                    var itemIndex = this.gridOptions.selectedItems.indexOf(item);
                    if (itemIndex >= 0) {
                        this.gridOptions.selectedItems.splice(itemIndex, 1);
                    }
                    else {
                        this.gridOptions.selectedItems.push(item);
                    }
                    break;
            }
        };
        GridController.prototype.computeFormattedItems = function () {
        };
        GridController.prototype.computeFilteredItems = function () {
        };
        GridController.prototype.setupDisplayItemsArray = function () {
        };
        return GridController;
    })();
    TrNgGrid.GridController = GridController;
    TrNgGrid.gridModule = angular.module(TrNgGrid.Constants.tableDirective, []);
    TrNgGrid.gridModule.directive(TrNgGrid.Constants.tableDirective, [
        TrNgGrid.Constants.gridConfigurationService,
        function (gridConfiguration) {
            return {
                restrict: 'A',
                scope: {
                    items: '=',
                    selectedItems: '=?',
                    filterBy: '=?',
                    filterByFields: '=?',
                    orderBy: '=?',
                    orderByReverse: '=?',
                    pageItems: '=?',
                    currentPage: '=?',
                    totalItems: '=?',
                    enableFiltering: '=?',
                    enableSorting: '=?',
                    selectionMode: '@',
                    locale: '@',
                    onDataRequired: '&',
                    onDataRequiredDelay: '=?',
                    fields: '=?'
                },
                controller: ["$compile", "$parse", "$timeout", TrNgGrid.Constants.gridConfigurationService, GridController],
                compile: function (templateElement, tAttrs) {
                    TrNgGrid.fixTableStructure(gridConfiguration, templateElement);
                    return {
                        pre: function (isolatedScope, instanceElement, tAttrs, controller, transcludeFn) {
                            controller.setGridOptions(isolatedScope);
                        }
                    };
                }
            };
        }
    ]);
})(TrNgGrid || (TrNgGrid = {}));

var TrNgGrid;
(function (TrNgGrid) {
    var GridConfigurationDefaultPagerOptions = (function () {
        function GridConfigurationDefaultPagerOptions() {
            this.minifiedPageCountThreshold = 3;
        }
        return GridConfigurationDefaultPagerOptions;
    })();
    var GridConfigurationDefaultStyles = (function () {
        function GridConfigurationDefaultStyles() {
            this.tableCssClass = "tr-ng-grid table table-bordered table-hover ";
            this.cellCssClass = "tr-ng-cell ";
            this.headerCellCssClass = "tr-ng-cell tr-ng-column-header ";
            this.bodyCellCssClass = "tr-ng-cell ";
            this.columnTitleCssClass = "tr-ng-title ";
            this.columnSortCssClass = "tr-ng-sort pull-right pull-top ";
            this.columnFilterInputWrapperCssClass = " ";
            this.columnFilterCssClass = "tr-ng-column-filter ";
            this.columnSortActiveCssClass = "tr-ng-sort-active text-info ";
            this.columnSortInactiveCssClass = "tr-ng-sort-inactive text-muted glyphicon glyphicon-chevron-down ";
            this.columnSortReverseOrderCssClass = "tr-ng-sort-order-reverse glyphicon glyphicon-chevron-down ";
            this.columnSortNormalOrderCssClass = "tr-ng-sort-order-normal glyphicon glyphicon-chevron-up ";
            this.rowSelectedCssClass = "active ";
            this.footerCssClass = "tr-ng-grid-footer form-inline ";
        }
        return GridConfigurationDefaultStyles;
    })();
    var GridConfigurationDefaultColumnOptions = (function () {
        function GridConfigurationDefaultColumnOptions() {
            this.cellWidth = undefined;
            this.cellHeight = undefined;
            this.displayAlign = "left";
            this.displayFormat = undefined;
            this.displayName = undefined;
            this.filter = undefined;
            this.enableFiltering = true;
            this.enableSorting = true;
        }
        return GridConfigurationDefaultColumnOptions;
    })();
    TrNgGrid.GridConfigurationDefaultColumnOptions = GridConfigurationDefaultColumnOptions;
    var GridConfigurationDefaultTemplates = (function () {
        function GridConfigurationDefaultTemplates($interpolateProvider, gridStyles) {
            var startNgSymbol = $interpolateProvider.startSymbol();
            var endNgSymbol = $interpolateProvider.endSymbol();
            this.headerCellStandard = '<th></th>';
            this.headerCellContentsStandard = '<div class="' + gridStyles.headerCellCssClass + '" >' + '  <div ' + TrNgGrid.Constants.columnSortDirectiveAttribute + '=""></div>' + '  <a ' + gridStyles.columnTitleCssClass + '"' + '     href="" ng-click="((gridOptions.enableSorting&&gridColumnOptions.enableSorting!==false)||gridColumnOptions.enableSorting)&&toggleSorting(gridColumnOptions.fieldName)">' + '      ' + startNgSymbol + 'gridColumnOptions.columnTitle |' + TrNgGrid.Constants.translateFilter + ':gridOptions.locale' + endNgSymbol + '  </a>' + '  <div ' + TrNgGrid.Constants.columnFilterDirectiveAttribute + '=""></div>' + '</div>';
            this.bodyCellStandard = '<div ng-attr-class="' + gridStyles.bodyCellCssClass + ' text-{{columnOptions.displayAlign}}" ng-switch="isCustomized">' + '  <div ng-switch-when="true">' + '    <div ng-transclude=""></div>' + '  </div>' + '  <div ng-switch-default>{{gridDisplayItem[columnOptions.displayFieldName]}}</div>' + '</div>';
            this.footerCellStandard = '<div class="' + gridStyles.footerCssClass + '" ng-switch="isCustomized">' + '  <div ng-switch-when="true">' + '    <div ng-transclude=""></div>' + '  </div>' + '  <div ng-switch-default>' + '    <span ' + TrNgGrid.Constants.globalFilterDirectiveAttribute + '=""></span>' + '    <span ' + TrNgGrid.Constants.pagerDirectiveAttribute + '=""></span>' + '  </div>' + '</div>';
            this.columnFilter = '<div ng-show="(gridOptions.enableFiltering&&columnOptions.enableFiltering!==false)||columnOptions.enableFiltering" class="' + gridStyles.columnFilterCssClass + '">' + ' <div class="' + gridStyles.columnFilterInputWrapperCssClass + '">' + '   <input class="form-control input-sm" type="text" ng-model="columnOptions.filter" ng-keypress="speedUpAsyncDataRetrieval($event)"></input>' + ' </div>' + '</div>';
            this.columnSort = '<a href="" ng-attr-title="{{\'Sort\'|' + TrNgGrid.Constants.translateFilter + ':gridOptions.locale}}"' + ' ng-show="(gridOptions.enableSorting&&columnOptions.enableSorting!==false)||columnOptions.enableSorting"' + ' ng-click="toggleSorting(columnOptions.fieldName)"' + ' class="' + gridStyles.columnSortCssClass + '" > ' + '  <span ng-class="{\'' + gridStyles.columnSortActiveCssClass + '\':gridOptions.orderBy==columnOptions.fieldName,\'' + gridStyles.columnSortInactiveCssClass + '\':gridOptions.orderBy!=columnOptions.fieldName,\'' + gridStyles.columnSortNormalOrderCssClass + '\':gridOptions.orderBy==columnOptions.fieldName&&!gridOptions.orderByReverse,\'' + gridStyles.columnSortReverseOrderCssClass + '\':gridOptions.orderBy==columnOptions.fieldName&&gridOptions.orderByReverse}" >' + '  </span>' + '</a>';
            this.footerGlobalFilter = '<span ng-show="gridOptions.enableFiltering" class="pull-left form-group">' + '  <input class="form-control" type="text" ng-model="gridOptions.filterBy" ng-keypress="speedUpAsyncDataRetrieval($event)" ng-attr-placeholder="{{\'Search\'|' + TrNgGrid.Constants.translateFilter + ':gridOptions.locale}}"></input>' + '</span>';
            this.footerPager = '<span class="pull-right form-group">' + ' <ul class="pagination">' + '   <li ng-class="{disabled:gridOptions.currentPage==0}" ng-if="isPaged&&!pageRangeFullCoverage">' + '     <a href="" ng-click="gridOptions.currentPage!=0&&navigateToPage(0)" ng-attr-title="{{\'First Page\'|' + TrNgGrid.Constants.translateFilter + ':gridOptions.locale}}">' + '         <span>&laquo;</span>' + '     </a>' + '   </li>' + '   <li ng-class="{disabled:gridOptions.currentPage==0}" ng-if="isPaged&&!pageRangeFullCoverage">' + '     <a href="" ng-click="gridOptions.currentPage!=0&&navigateToPage(gridOptions.currentPage - 1)" ng-attr-title="{{\'Previous Page\'|' + TrNgGrid.Constants.translateFilter + ':gridOptions.locale}}">' + '         <span>&lsaquo;</span>' + '     </a>' + '   </li>' + '   <li ng-if="isPaged&&!pageRangeFullCoverage&&visiblePageRange[0]!=0"class="disabled">' + '      <span>...</span>' + '   </li>' + '   <li ng-if="isPaged" ng-repeat="pageIndex in visiblePageRange track by $index" ng-class="{active:pageIndex===gridOptions.currentPage}">' + '      <a href="" ng-click="navigateToPage(pageIndex)" ng-attr-title="{{\'Page\'|' + TrNgGrid.Constants.translateFilter + ':gridOptions.locale}}">{{pageIndex+1}}</a>' + '   </li>' + '   <li ng-if="isPaged&&!pageRangeFullCoverage&&visiblePageRange[visiblePageRange.length-1]!=lastPage" class="disabled">' + '      <span>...</span>' + '   </li>' + '   <li ng-class="{disabled:gridOptions.currentPage==lastPage}" ng-if="isPaged&&!pageRangeFullCoverage">' + '     <a href="" ng-click="gridOptions.currentPage!=lastPage&&navigateToPage(gridOptions.currentPage + 1)" ng-attr-title="{{\'Next Page\'|' + TrNgGrid.Constants.translateFilter + ':gridOptions.locale}}">' + '         <span>&rsaquo;</span>' + '     </a>' + '   </li>' + '   <li ng-class="{disabled:gridOptions.currentPage==lastPage}" ng-if="isPaged&&!pageRangeFullCoverage">' + '     <a href="" ng-click="gridOptions.currentPage!=lastPage&&navigateToPage(lastPage)" ng-attr-title="{{\'Last Page\'|' + TrNgGrid.Constants.translateFilter + ':gridOptions.locale}}">' + '         <span>&raquo;</span>' + '     </a>' + '   </li>' + '   <li class="disabled" style="white-space: nowrap;">' + '     <span ng-hide="totalItemsCount">{{\'No items to display\'|' + TrNgGrid.Constants.translateFilter + ':gridOptions.locale}}</span>' + '     <span ng-show="totalItemsCount">' + '       {{visibleStartItemIndex+1}} - {{visibleEndItemIndex+1}} {{\'displayed\'|' + TrNgGrid.Constants.translateFilter + ':gridOptions.locale}}' + '       <span>, {{totalItemsCount}} {{\'in total\'|' + TrNgGrid.Constants.translateFilter + ':gridOptions.locale}}</span>' + '     </span > ' + '   </li>' + ' </ul>' + '</span>';
        }
        return GridConfigurationDefaultTemplates;
    })();
    var GridConfigurationProvider = (function () {
        function GridConfigurationProvider($interpolateProvider) {
            var _this = this;
            this.$interpolateProvider = $interpolateProvider;
            this.$get = [
                function () {
                    return {
                        styles: _this.styles(),
                        defaultColumnOptions: _this.defaultColumnOptions(),
                        translations: _this.gridTranslations,
                        pagerOptions: _this.pagerOptions(),
                        templates: _this.templates(),
                        debugMode: _this.debugMode()
                    };
                }
            ];
            this.gridTranslations = {};
            this.gridDebugMode = true;
        }
        GridConfigurationProvider.prototype.styles = function (styles) {
            if (styles) {
                this.gridStyles = angular.extend({}, new GridConfigurationDefaultStyles(), styles);
            }
            return angular.extend({}, this.gridStyles || new GridConfigurationDefaultStyles());
        };
        GridConfigurationProvider.prototype.defaultColumnOptions = function (columnOptions) {
            if (columnOptions) {
                this.gridDefaultColumnOptions = angular.extend({}, new GridConfigurationDefaultColumnOptions(), columnOptions);
            }
            return angular.extend({}, this.gridDefaultColumnOptions || new GridConfigurationDefaultColumnOptions());
        };
        GridConfigurationProvider.prototype.translations = function (locale, translations) {
            var localeTranslations = this.gridTranslations[locale] = angular.extend({}, this.gridTranslations[locale], translations);
            return angular.extend({}, localeTranslations);
        };
        GridConfigurationProvider.prototype.defaultTranslations = function (translations) {
            return this.translations(TrNgGrid.Constants.defaultTranslationLocale, translations);
        };
        GridConfigurationProvider.prototype.pagerOptions = function (pagerOptions) {
            if (pagerOptions) {
                this.gridPagerOptions = angular.extend({}, new GridConfigurationDefaultPagerOptions(), pagerOptions);
            }
            return angular.extend({}, this.gridPagerOptions || new GridConfigurationDefaultPagerOptions());
        };
        GridConfigurationProvider.prototype.templates = function (templates) {
            if (templates) {
                this.gridTemplates = angular.extend({}, new GridConfigurationDefaultTemplates(this.$interpolateProvider, this.styles()), templates);
            }
            return angular.extend({}, this.gridTemplates || new GridConfigurationDefaultTemplates(this.$interpolateProvider, this.styles()));
        };
        GridConfigurationProvider.prototype.debugMode = function (debugMode) {
            if (debugMode !== undefined) {
                this.gridDebugMode = !!debugMode;
            }
            return this.gridDebugMode;
        };
        return GridConfigurationProvider;
    })();
    TrNgGrid.gridModule.provider(TrNgGrid.Constants.gridConfigurationService, GridConfigurationProvider);
})(TrNgGrid || (TrNgGrid = {}));

var TrNgGrid;
(function (TrNgGrid) {
    (function (GridSectionType) {
        GridSectionType[GridSectionType["Enforced"] = 0] = "Enforced";
        GridSectionType[GridSectionType["Header"] = 1] = "Header";
        GridSectionType[GridSectionType["Body"] = 2] = "Body";
    })(TrNgGrid.GridSectionType || (TrNgGrid.GridSectionType = {}));
    var GridSectionType = TrNgGrid.GridSectionType;
    var DefaultGridColumnLayoutOptions = (function () {
        function DefaultGridColumnLayoutOptions() {
            this.fieldName = undefined;
            this.colspan = undefined;
            this.isCustomized = undefined;
            this.isAutoGenerated = undefined;
            this.isLinkedToField = undefined;
            this.isDeactivated = undefined;
            this.placeholder = undefined;
        }
        return DefaultGridColumnLayoutOptions;
    })();
    TrNgGrid.DefaultGridColumnLayoutOptions = DefaultGridColumnLayoutOptions;
    var GridLayoutRow = (function () {
        function GridLayoutRow(gridConfiguration, gridLayout, gridSectionType) {
            this.gridConfiguration = gridConfiguration;
            this.gridLayout = gridLayout;
            this.gridSectionType = gridSectionType;
            this.cells = [];
        }
        GridLayoutRow.prototype.findCell = function (fieldName) {
            for (var cellIndex = 0; cellIndex < this.cells.length; cellIndex++) {
                if (this.cells[cellIndex].fieldName === fieldName) {
                    return this.cells[cellIndex];
                }
            }
            return null;
        };
        GridLayoutRow.prototype.registerCell = function (cell, index) {
            if (!cell.fieldName) {
                throw 'A field name was not provided';
            }
            var cellFound = false;
            if (index === undefined) {
                for (var cellIndex = 0; (cellIndex < this.cells.length) && (!cellFound); cellIndex++) {
                    if (this.cells[cellIndex].fieldName === cell.fieldName) {
                        this.cells[cellIndex] = cell;
                        this.gridConfiguration.debugMode && TrNgGrid.log("A layout cell [" + cell.fieldName + "] was updated in section " + this.gridSectionType);
                        cellFound = true;
                    }
                }
            }
            if (!cellFound) {
                if (index === undefined || index === this.cells.length) {
                    this.cells.push(cell);
                }
                else {
                    this.cells.splice(index, 0, cell);
                }
                this.gridConfiguration.debugMode && TrNgGrid.log("A new layout cell [" + cell.fieldName + "] was registered in section " + this.gridSectionType);
            }
            this.gridLayout.triggerReconciliation();
        };
        GridLayoutRow.prototype.unregisterCell = function (cell) {
            for (var cellIndex = 0; cellIndex < this.cells.length; cellIndex++) {
                if (this.cells[cellIndex] === cell) {
                    this.cells.splice(cellIndex, 1);
                    this.gridConfiguration.debugMode && TrNgGrid.log("A layout cell [" + cell.fieldName + "] was unregistered in section " + this.gridSectionType);
                    this.gridLayout.triggerReconciliation();
                    return;
                }
            }
        };
        return GridLayoutRow;
    })();
    TrNgGrid.GridLayoutRow = GridLayoutRow;
    var GridLayoutSection = (function () {
        function GridLayoutSection(gridConfiguration, gridLayout, gridSectionType) {
            this.gridConfiguration = gridConfiguration;
            this.gridLayout = gridLayout;
            this.gridSectionType = gridSectionType;
            this.rows = [];
        }
        GridLayoutSection.prototype.registerRow = function () {
            var row = new GridLayoutRow(this.gridConfiguration, this.gridLayout, this.gridSectionType);
            this.rows.push(row);
            this.gridConfiguration.debugMode && TrNgGrid.log("A new layout row [" + this.rows.length + "] was registered in section " + this.gridSectionType);
            this.gridLayout.triggerReconciliation();
            return row;
        };
        GridLayoutSection.prototype.unregisterRow = function (row) {
            for (var rowIndex = 0; rowIndex < this.rows.length; rowIndex++) {
                if (this.rows[rowIndex] === row) {
                    this.rows.splice(rowIndex, 1);
                    this.gridConfiguration.debugMode && TrNgGrid.log("A layout row was unregistered in section " + this.gridSectionType);
                    this.gridLayout.triggerReconciliation();
                    return;
                }
            }
        };
        GridLayoutSection.prototype.clear = function () {
            this.rows.splice(0);
            this.gridConfiguration.debugMode && TrNgGrid.log("Layout section " + this.gridSectionType + " got cleared");
            this.gridLayout.triggerReconciliation();
        };
        return GridLayoutSection;
    })();
    TrNgGrid.GridLayoutSection = GridLayoutSection;
    var GridLayout = (function () {
        function GridLayout(gridConfiguration, gridOptions) {
            this.gridConfiguration = gridConfiguration;
            this.gridOptions = gridOptions;
            this.sections = new Array(2 /* Body */ + 1);
            this.reconciliationTriggerKey = "triggerGridReconciliation";
            this.reconciling = false;
            this.setupListeners();
        }
        GridLayout.prototype.getSection = function (section) {
            var colSection = this.sections[section];
            if (!colSection) {
                this.sections[section] = colSection = new GridLayoutSection(this.gridConfiguration, this, section);
                this.gridConfiguration.debugMode && TrNgGrid.log("A new layout section [" + section + "] was registered");
                this.triggerReconciliation();
            }
            return colSection;
        };
        GridLayout.prototype.triggerReconciliation = function () {
            this.gridOptions[this.reconciliationTriggerKey] = true;
        };
        GridLayout.prototype.setupListeners = function () {
            var _this = this;
            this.gridOptions.$watch(this.reconciliationTriggerKey, function (reconciliationTriggered) {
                if (reconciliationTriggered) {
                    _this.reconcile();
                }
            });
            var itemsFieldExtractionWatcherDereg = null;
            itemsFieldExtractionWatcherDereg = this.gridOptions.$watch("items.length", function (newLength) {
                if (newLength) {
                    _this.enforceFields(TrNgGrid.extractFields(_this.gridOptions.items[0]));
                    if (itemsFieldExtractionWatcherDereg) {
                        itemsFieldExtractionWatcherDereg();
                        itemsFieldExtractionWatcherDereg = null;
                    }
                }
            });
            if (this.gridOptions.fields) {
                this.enforceFields(this.gridOptions.fields);
                if (itemsFieldExtractionWatcherDereg) {
                    itemsFieldExtractionWatcherDereg();
                    itemsFieldExtractionWatcherDereg = null;
                }
            }
            this.gridOptions.$watchCollection("fields", function (newFields, oldFields) {
                if (!angular.equals(newFields, oldFields)) {
                    _this.enforceFields(newFields || []);
                    if (itemsFieldExtractionWatcherDereg) {
                        itemsFieldExtractionWatcherDereg();
                        itemsFieldExtractionWatcherDereg = null;
                    }
                }
            });
        };
        GridLayout.prototype.enforceFields = function (fields) {
            var enforcedSection = this.getSection(0 /* Enforced */);
            if (fields) {
                enforcedSection.clear();
                var enforcedSectionVirtualRow = enforcedSection.registerRow();
                angular.forEach(fields, function (fieldName) {
                    var enforcedCellLayout = new DefaultGridColumnLayoutOptions();
                    enforcedCellLayout.fieldName = fieldName;
                    enforcedCellLayout.isAutoGenerated = true;
                    enforcedCellLayout.isLinkedToField = true;
                    enforcedSectionVirtualRow.registerCell(enforcedCellLayout);
                });
            }
            else {
                enforcedSection.clear();
            }
        };
        GridLayout.prototype.reconcile = function () {
            var _this = this;
            try {
                var extractedFieldNames = new Array();
                var sectionIndex;
                for (sectionIndex = 0 /* Enforced */; sectionIndex <= 1 /* Header */ && extractedFieldNames.length === 0; sectionIndex++) {
                    angular.forEach(this.getSection(sectionIndex).rows, function (row) {
                        angular.forEach(row.cells, function (cell) {
                            if (cell.isLinkedToField) {
                                extractedFieldNames.push(cell.fieldName);
                            }
                        });
                    });
                }
                ;
                var preparedRows = new Array();
                for (sectionIndex = 0 /* Enforced */; sectionIndex <= 2 /* Body */; sectionIndex++) {
                    angular.forEach(this.getSection(sectionIndex).rows, function (row) {
                        if (sectionIndex !== 0 /* Enforced */) {
                            _this.cleanupRowForReconciliation(row, extractedFieldNames);
                        }
                        preparedRows.push(row);
                    });
                }
                ;
                for (var rowIndex = 0; rowIndex < preparedRows.length - 1; rowIndex++) {
                    this.reconcileRows(preparedRows[rowIndex], preparedRows[rowIndex + 1]);
                }
            }
            finally {
                this.gridOptions[this.reconciliationTriggerKey] = false;
            }
        };
        GridLayout.prototype.reconcileRows = function (templateRow, targetRow) {
            var currentTargetRowRegistrationIndex = 0;
            for (var templateCellRegistrationIndex = 0; templateCellRegistrationIndex < templateRow.cells.length; templateCellRegistrationIndex++) {
                var templateCellRegistration = templateRow.cells[templateCellRegistrationIndex];
                if (templateCellRegistration.isDeactivated) {
                    continue;
                }
                var matchNotFound = true;
                while (matchNotFound) {
                    var currentTargetCellRegistration = currentTargetRowRegistrationIndex < targetRow.cells.length ? targetRow.cells[currentTargetRowRegistrationIndex] : null;
                    if (!currentTargetCellRegistration || !currentTargetCellRegistration.isDeactivated) {
                        if ((!currentTargetCellRegistration) || (currentTargetCellRegistration.isLinkedToField !== templateCellRegistration.isLinkedToField) || ((currentTargetCellRegistration.isLinkedToField) && (currentTargetCellRegistration.fieldName !== templateCellRegistration.fieldName))) {
                            currentTargetCellRegistration = angular.extend({}, templateCellRegistration);
                            currentTargetCellRegistration.isAutoGenerated = true;
                            currentTargetCellRegistration.isCustomized = false;
                            targetRow.registerCell(currentTargetCellRegistration, currentTargetRowRegistrationIndex);
                        }
                        matchNotFound = false;
                    }
                    currentTargetRowRegistrationIndex++;
                }
            }
            while (currentTargetRowRegistrationIndex < targetRow.cells.length) {
                var extraCellRegistration = targetRow.cells[currentTargetRowRegistrationIndex];
                if (extraCellRegistration.isAutoGenerated) {
                    targetRow.unregisterCell(extraCellRegistration);
                }
                else {
                    extraCellRegistration.isDeactivated = true;
                    currentTargetRowRegistrationIndex++;
                }
            }
        };
        GridLayout.prototype.cleanupRowForReconciliation = function (targetRow, fields) {
            for (var cellRegistrationIndex = 0; cellRegistrationIndex < targetRow.cells.length; cellRegistrationIndex++) {
                var cellRegistration = targetRow.cells[cellRegistrationIndex];
                if (cellRegistration.isAutoGenerated) {
                    targetRow.unregisterCell(cellRegistration);
                    cellRegistrationIndex--;
                }
                else {
                    cellRegistration.isDeactivated = cellRegistration.isLinkedToField && (fields.indexOf(cellRegistration.fieldName) < 0);
                }
            }
        };
        return GridLayout;
    })();
    TrNgGrid.GridLayout = GridLayout;
    var columnOptionsFields = TrNgGrid.extractFields(new TrNgGrid.GridConfigurationDefaultColumnOptions());
    var columnLayoutOptionsFields = TrNgGrid.extractFields(new DefaultGridColumnLayoutOptions());
    var GridColumnSetupController = (function () {
        function GridColumnSetupController($scope) {
            this.$scope = $scope;
        }
        GridColumnSetupController.prototype.prepareColumn = function () {
            var _this = this;
            var gridRowScope = (this.$scope.$parent);
            this.gridController = gridRowScope.grid;
            this.gridLayoutRow = gridRowScope.gridLayoutRow;
            this.columnScope = gridRowScope.$new();
            this.$scope.$on("$destroy", function () {
                debugger;
                _this.columnScope.$destroy();
                _this.columnScope = null;
            });
            this.$scope.$watchGroup(columnOptionsFields, function () {
                _this.registerColumnOptions();
            });
            this.$scope.$watchGroup(columnLayoutOptionsFields, function () {
                _this.registerColumnLayoutOptions();
            });
            this.registerColumnOptions();
            this.registerColumnLayoutOptions();
        };
        GridColumnSetupController.prototype.registerColumnOptions = function () {
            debugger;
            var updatedColumnOptions = {
                fieldName: this.$scope.fieldName,
                displayName: this.$scope.displayName,
                displayAlign: this.$scope.displayAlign,
                displayFormat: this.$scope.displayFormat,
                enableSorting: this.$scope.enableSorting === undefined ? undefined : (this.$scope.enableSorting.toString() === "true"),
                enableFiltering: this.$scope.enableFiltering === undefined ? undefined : (this.$scope.enableFiltering.toString() === "true"),
                cellWidth: this.$scope.cellWidth,
                cellHeight: this.$scope.cellHeight,
                filter: this.$scope.filter
            };
            updatedColumnOptions = this.gridController.setColumnOptions(updatedColumnOptions);
            this.columnOptions = updatedColumnOptions;
            this.columnScope.gridColumnOptions = this.columnOptions;
        };
        GridColumnSetupController.prototype.registerColumnLayoutOptions = function () {
            debugger;
            if (!this.columnOptions) {
                this.registerColumnOptions();
            }
            var updatedLayoutOptions = {
                fieldName: this.$scope.fieldName,
                isAutoGenerated: this.$scope.isAutoGenerated && this.$scope.isAutoGenerated.toString() === "true",
                isCustomized: this.$scope.isCustomized && this.$scope.isCustomized.toString() === "true",
                isLinkedToField: this.columnOptions.isLinkedToField
            };
            if (updatedLayoutOptions.isAutoGenerated) {
                updatedLayoutOptions = this.gridLayoutRow.findCell(updatedLayoutOptions.fieldName);
            }
            else {
                this.gridLayoutRow.registerCell(updatedLayoutOptions);
            }
            this.columnLayout = updatedLayoutOptions;
            this.columnScope.gridColumnLayout = this.columnLayout;
        };
        return GridColumnSetupController;
    })();
    TrNgGrid.GridColumnSetupController = GridColumnSetupController;
})(TrNgGrid || (TrNgGrid = {}));

var TrNgGrid;
(function (TrNgGrid) {
    TrNgGrid.gridModule.directive(TrNgGrid.Constants.headerDirective, [
        function () {
            return {
                restrict: 'A',
                scope: true,
                require: "^" + TrNgGrid.Constants.tableDirective,
                link: {
                    pre: function (scope, instanceElement, tAttrs, gridController, transcludeFn) {
                        scope.grid = gridController;
                        scope.gridOptions = gridController.gridOptions;
                        scope.gridLayoutSection = gridController.gridLayout.getSection(TrNgGrid.GridSectionType.Header);
                    }
                }
            };
        }
    ]);
    TrNgGrid.gridModule.directive(TrNgGrid.Constants.headerRowDirective, ["$compile", TrNgGrid.Constants.gridConfigurationService, function ($compile, gridConfiguration) {
        return {
            restrict: 'A',
            scope: true,
            require: "^" + TrNgGrid.Constants.tableDirective,
            compile: function ($templateElement, $tAttrs) {
                return {
                    pre: function ($scope, $instanceElement, $tAttrs, $controller, $transcludeFn) {
                        $scope.gridLayoutRow = $scope.gridLayoutSection.registerRow();
                        $scope.$on("$destroy", function () {
                            $scope.gridLayoutSection.unregisterRow($scope.gridLayoutRow);
                        });
                    },
                    post: function ($scope, $instanceElement, $tAttrs, $controller, $transcludeFn) {
                    }
                };
            }
        };
    }]);
    TrNgGrid.gridModule.directive(TrNgGrid.Constants.headerCellPlaceholderDirective, ["$compile", "$interpolate", TrNgGrid.Constants.gridConfigurationService, function ($compile, $interpolate, gridConfiguration) {
        var autoGeneratedCellTemplate = angular.element(gridConfiguration.templates.headerCellStandard);
        autoGeneratedCellTemplate.attr(TrNgGrid.Constants.headerCellDirectiveAttribute, "");
        autoGeneratedCellTemplate.attr(TrNgGrid.Constants.dataColumnIsAutoGeneratedAttribute, "true");
        autoGeneratedCellTemplate.attr("data-field-name", $interpolate.startSymbol() + "gridColumnLayout.fieldName" + $interpolate.endSymbol());
        return {
            restrict: 'A',
            require: "^" + TrNgGrid.Constants.tableDirective,
            transclude: "element",
            scope: true,
            compile: function ($templatedElement, $tAttrs) {
                return {
                    pre: function ($scope, $instanceElement, $tAttrs, $controller, $transcludeFn) {
                        $scope.gridColumnLayout.placeholder = $instanceElement;
                    },
                    post: function ($scope, $instanceElement, $tAttrs, $controller, $transcludeFn) {
                        if ($scope.gridColumnLayout.isAutoGenerated) {
                            var autoGeneratedPreCompilationElement = autoGeneratedCellTemplate.clone();
                            $instanceElement.after(autoGeneratedPreCompilationElement);
                            var autoGeneratedElementLinkingFct = $compile(autoGeneratedPreCompilationElement);
                            var autoGeneratedCell = autoGeneratedElementLinkingFct($scope);
                            $scope.$on("$destroy", function () {
                                debugger;
                                if (autoGeneratedCell) {
                                    autoGeneratedCell.remove();
                                    autoGeneratedCell = null;
                                }
                                if (autoGeneratedPreCompilationElement) {
                                    autoGeneratedPreCompilationElement.remove();
                                    autoGeneratedPreCompilationElement = null;
                                }
                            });
                        }
                    }
                };
            }
        };
    }]);
    TrNgGrid.gridModule.directive(TrNgGrid.Constants.headerCellDirective, ["$compile", TrNgGrid.Constants.gridConfigurationService, function ($compile, gridConfiguration) {
        return {
            restrict: 'A',
            require: "^" + TrNgGrid.Constants.tableDirective,
            controller: ["$scope", "$controller", TrNgGrid.GridColumnSetupController],
            scope: {
                isCustomized: "@" + TrNgGrid.Constants.dataColumnIsCustomizedField,
                isAutoGenerated: "@" + TrNgGrid.Constants.dataColumnIsAutoGeneratedField,
                fieldName: "@",
                displayName: "@",
                displayAlign: "@",
                displayFormat: "@",
                enableSorting: "@",
                enableFiltering: "@",
                cellWidth: "@",
                cellHeight: "@",
                filter: "@",
                colspan: "@"
            },
            priority: 101,
            controllerAs: "gridColumnSetup",
            transclude: 'element',
            terminal: true,
            compile: function ($templateElement, $tAttrs) {
                return {
                    pre: function ($scope, $instanceElement, $tAttrs, $controller, $transcludeFn) {
                    },
                    post: function ($scope, $instanceElement, $tAttrs, $controller, $transcludeFn) {
                        $scope.gridColumnSetup.prepareColumn();
                        var transcludedCellElement = null;
                        var setupNewScope = function () {
                            if (transcludedCellElement) {
                                transcludedCellElement.remove();
                                transcludedCellElement = null;
                            }
                            var gridColumnScope = $scope.gridColumnSetup.columnScope;
                            var gridColumnLayout = gridColumnScope.gridColumnLayout;
                            if (gridColumnLayout.placeholder) {
                                $transcludeFn(gridColumnScope, function (newTranscludedCellElement) {
                                    transcludedCellElement = newTranscludedCellElement;
                                    gridColumnLayout.placeholder.after(transcludedCellElement);
                                    if (!gridColumnLayout.isCustomized) {
                                        var standardCellContentsTemplate = angular.element(gridConfiguration.templates.headerCellContentsStandard);
                                        transcludedCellElement.append(standardCellContentsTemplate);
                                        $compile(standardCellContentsTemplate)(gridColumnScope);
                                    }
                                });
                            }
                        };
                        $scope.$watch("gridColumnSetup.columnScope.gridColumnLayout.placeholder", function (newPlaceholder, oldPlaceholder) {
                            if (newPlaceholder === oldPlaceholder) {
                                return;
                            }
                            setupNewScope();
                        });
                        setupNewScope();
                    }
                };
            }
        };
    }]);
})(TrNgGrid || (TrNgGrid = {}));

var TrNgGrid;
(function (TrNgGrid) {
    TrNgGrid.gridModule.filter(TrNgGrid.Constants.sortFilter, [
        "$filter",
        "$parse",
        function ($filter, $parse) {
            return function (input, gridOptions, gridColumnOptions) {
                if (!gridOptions.orderBy || !gridColumnOptions) {
                    return input;
                }
                var sortedInput = $filter("orderBy")(input, function (item) {
                    var fieldValue = undefined;
                    try {
                        fieldValue = $parse("item.trNgGridDataItem." + gridOptions.orderBy)({ item: item });
                    }
                    catch (ex) {
                    }
                    if (fieldValue === undefined) {
                        try {
                            fieldValue = $parse("item." + gridColumnOptions.displayFieldName)({ item: item });
                        }
                        catch (ex) {
                        }
                    }
                    return fieldValue;
                }, gridOptions.orderByReverse);
                return sortedInput;
            };
        }
    ]).filter(TrNgGrid.Constants.dataPagingFilter, function () {
        return function (input, gridOptions) {
            if (input)
                gridOptions.totalItems = input.length;
            if (!gridOptions.pageItems || !input || input.length === 0)
                return input;
            if (!gridOptions.currentPage) {
                gridOptions.currentPage = 0;
            }
            var startIndex = gridOptions.currentPage * gridOptions.pageItems;
            if (startIndex >= input.length) {
                gridOptions.currentPage = 0;
                startIndex = 0;
            }
            var endIndex = gridOptions.currentPage * gridOptions.pageItems + gridOptions.pageItems;
            return input.slice(startIndex, endIndex);
        };
    }).filter(TrNgGrid.Constants.translateFilter, [
        "$filter",
        "$injector",
        TrNgGrid.Constants.gridConfigurationService,
        function ($filter, $injector, gridConfiguration) {
            var translateFilterAvailable = true;
            function getTranslation(languageId, retrieveTranslationFct) {
                var foundTranslation = null;
                var languageIdParts = languageId.split(/[-_]/);
                for (var languageIdPartIndex = languageIdParts.length; (languageIdPartIndex >= 0) && (!foundTranslation); languageIdPartIndex--) {
                    var subLanguageId = languageIdPartIndex === 0 ? TrNgGrid.Constants.defaultTranslationLocale : languageIdParts.slice(0, languageIdPartIndex).join("-");
                    var langTranslations = gridConfiguration.translations[subLanguageId];
                    if (langTranslations) {
                        foundTranslation = retrieveTranslationFct(langTranslations);
                    }
                }
                return foundTranslation;
            }
            ;
            return function (input, languageId) {
                if (!input) {
                    return input;
                }
                if (!languageId) {
                    languageId = TrNgGrid.Constants.defaultTranslationLocale;
                }
                var translatedText;
                if (input instanceof Date) {
                    var dateFormat = getTranslation(languageId, function (localeTranslations) { return localeTranslations.localeDateFormat; });
                    translatedText = $filter("date")(input, dateFormat);
                    return translatedText;
                }
                translatedText = getTranslation(languageId, function (localeTranslations) { return localeTranslations[input]; });
                if (!translatedText && $injector.has("translateFilter")) {
                    try {
                        translatedText = $filter("translate")(input);
                    }
                    catch (ex) {
                    }
                }
                if (!translatedText) {
                    translatedText = input;
                }
                return translatedText;
            };
        }
    ]);
})(TrNgGrid || (TrNgGrid = {}));

