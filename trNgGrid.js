var TrNgGrid;
(function (TrNgGrid) {
    var Constants;
    (function (Constants) {
        Constants.tableDirective = "trNgGrid";
        Constants.tableDirectiveAttribute = "data-tr-ng-grid";
        Constants.dataColumnIsAutoGeneratedAttribute = Constants.tableDirectiveAttribute + "-auto-generated";
        Constants.dataColumnIsAutoGeneratedField = Constants.tableDirective + "AutoGenerated";
        Constants.dataColumnIsCustomizedAttribute = Constants.tableDirectiveAttribute + "-customized";
        Constants.dataColumnIsCustomizedField = Constants.tableDirective + "Customized";
        Constants.sortFilter = Constants.tableDirective + "SortFilter";
        Constants.dataPagingFilter = Constants.tableDirective + "DataPagingFilter";
        Constants.translateFilter = Constants.tableDirective + "TranslateFilter";
        Constants.dataFormattingFilter = Constants.tableDirective + "DataFormatFilter";
        Constants.defaultTranslationLocale = "default";
        Constants.bodyDirective = Constants.tableDirective + "Body";
        Constants.bodyDirectiveAttribute = Constants.tableDirectiveAttribute + "-body";
        Constants.bodyRowDirective = Constants.bodyDirective + "Row";
        Constants.bodyRowDirectiveAttribute = Constants.bodyDirectiveAttribute + "-row";
        Constants.headerDirective = Constants.tableDirective + "Header";
        Constants.headerDirectiveAttribute = Constants.tableDirectiveAttribute + "-header";
        Constants.headerRowDirective = Constants.headerDirective + "Row";
        Constants.headerRowDirectiveAttribute = Constants.headerDirectiveAttribute + "-row";
        Constants.footerDirective = Constants.tableDirective + "Footer";
        Constants.footerDirectiveAttribute = Constants.tableDirectiveAttribute + "-footer";
        Constants.cellFooterDirective = Constants.tableDirective + "FooterCell";
        Constants.cellFooterDirectiveAttribute = Constants.tableDirectiveAttribute + "-footer-cell";
        Constants.cellFooterTemplateDirective = Constants.tableDirective + "FooterCellTemplate";
        Constants.cellFooterTemplateDirectiveAttribute = Constants.tableDirectiveAttribute + "-footer-cell-template";
        Constants.globalFilterDirective = Constants.tableDirective + "GlobalFilter";
        Constants.globalFilterDirectiveAttribute = Constants.tableDirectiveAttribute + "-global-filter";
        Constants.pagerDirective = Constants.tableDirective + "Pager";
        Constants.pagerDirectiveAttribute = Constants.tableDirectiveAttribute + "-pager";
        Constants.cellHeaderDirective = Constants.tableDirective + "HeaderCell";
        Constants.cellHeaderDirectiveAttribute = Constants.tableDirectiveAttribute + "-header-cell";
        Constants.cellHeaderTemplateDirective = Constants.tableDirective + "HeaderCellTemplate";
        Constants.cellHeaderTemplateDirectiveAttribute = Constants.tableDirectiveAttribute + "-header-cell-template";
        Constants.cellBodyDirective = Constants.tableDirective + "BodyCell";
        Constants.cellBodyDirectiveAttribute = Constants.tableDirectiveAttribute + "-body-cell";
        Constants.cellBodyTemplateDirective = Constants.tableDirective + "BodyCellTemplate";
        Constants.cellBodyTemplateDirectiveAttribute = Constants.tableDirectiveAttribute + "-body-cell-template";
        Constants.columnSortDirective = Constants.tableDirective + "ColumnSort";
        Constants.columnSortDirectiveAttribute = Constants.tableDirectiveAttribute + "-column-sort";
        Constants.columnFilterDirective = Constants.tableDirective + "ColumnFilter";
        Constants.columnFilterDirectiveAttribute = Constants.tableDirectiveAttribute + "-column-filter";
        Constants.gridConfigurationService = Constants.tableDirective + "Configuration";
        Constants.gridConfigurationProvider = Constants.gridConfigurationService + "Provider";
    })(Constants = TrNgGrid.Constants || (TrNgGrid.Constants = {}));
})(TrNgGrid || (TrNgGrid = {}));

var TrNgGrid;
(function (TrNgGrid) {
    function findChildByTagName(parent, childTag) {
        childTag = childTag.toUpperCase();
        var children = parent.children();
        for (var childIndex = 0; childIndex < children.length; childIndex++) {
            var childElement = children[childIndex];
            if (childElement.tagName === childTag) {
                return angular.element(childElement);
            }
        }
        return null;
    }
    TrNgGrid.findChildByTagName = findChildByTagName;
    ;
    function findChildIndex(child) {
        var parent = child.parent();
        var children = parent.children();
        var childIndex = 0;
        for (; childIndex < children.length && children[childIndex] === child[0]; childIndex++)
            ;
        return (childIndex >= children.length) ? -1 : childIndex;
    }
    TrNgGrid.findChildIndex = findChildIndex;
    ;
    function findChildrenByTagName(parent, childTag) {
        childTag = childTag.toUpperCase();
        var retChildren = new Array();
        var children = parent.children();
        for (var childIndex = 0; childIndex < children.length; childIndex++) {
            var childElement = children[childIndex];
            if (childElement.tagName === childTag) {
                retChildren.push(angular.element(childElement));
            }
        }
        return retChildren;
    }
    TrNgGrid.findChildrenByTagName = findChildrenByTagName;
    ;
    function wrapTemplatedCell(templateElement, cellTemplateDirective) {
        var childrenElements = templateElement.children();
        if (childrenElements.length !== 1 || !angular.element(childrenElements[0]).attr(cellTemplateDirective)) {
            var templateWrapElement = angular.element("<div>" + templateElement.html() + "</div>").attr(cellTemplateDirective, "");
            templateElement.empty();
            templateElement.append(templateWrapElement);
        }
    }
    TrNgGrid.wrapTemplatedCell = wrapTemplatedCell;
    ;
    function log(message) {
        console.log(TrNgGrid.Constants.tableDirective + "(" + new Date().getTime() + "): " + message);
    }
    TrNgGrid.log = log;
    ;
    function createRowElement() {
        return findChildByTagName(findChildByTagName(angular.element("<table><tbody><tr></tr></tbody></table>"), "tbody"), "tr");
    }
    TrNgGrid.createRowElement = createRowElement;
    function createCellElement(cellTagName) {
        return findChildByTagName(findChildByTagName(findChildByTagName(angular.element("<table><tbody><tr><" + cellTagName + "></" + cellTagName + "></tr></tbody></table>"), "tbody"), "tr"), cellTagName);
    }
    TrNgGrid.createCellElement = createCellElement;
    function fixGridCell(gridConfiguration, cellElement, cellTagName, cellElementDirectiveAttribute) {
        if (!cellElement) {
            cellElement = createCellElement(cellTagName);
            cellElement.attr(TrNgGrid.Constants.dataColumnIsAutoGeneratedAttribute, "true");
        }
        cellElement.attr(cellElementDirectiveAttribute, "");
        var cellChildrenElements = cellElement.children();
        var isCustomized = cellChildrenElements.length || ((cellElement.html().replace(/^\s+|\s+$/gm, '')));
        if (isCustomized && cellChildrenElements.length === 0) {
            var wrappedContent = angular.element("<div>" + cellElement.html() + "</div>");
            cellElement.empty();
            cellElement.append(wrappedContent);
        }
        if (isCustomized) {
            cellElement.attr(TrNgGrid.Constants.dataColumnIsCustomizedAttribute, "true");
        }
        return cellElement;
    }
    TrNgGrid.fixGridCell = fixGridCell;
    function fixGridSection(gridConfiguration, sectionElement, rowElementDirectiveAttribute, cellTagName, cellElementDirectiveAttribute) {
        var rowElement;
        var rowElements = findChildrenByTagName(sectionElement, "tr");
        if (!rowElements.length) {
            sectionElement.empty();
            rowElement = createRowElement();
            sectionElement.append(rowElement);
            rowElements.push(rowElement);
        }
        for (var rowIndex = 0; rowIndex < rowElements.length; rowIndex++) {
            rowElement = rowElements[rowIndex];
            rowElement.attr(rowElementDirectiveAttribute, "");
            var cellElements = findChildrenByTagName(rowElement, cellTagName);
            if (cellElements.length === 0 || !cellElements[0].attr(TrNgGrid.Constants.dataColumnIsAutoGeneratedAttribute)) {
                rowElement.prepend(angular.element(gridConfiguration.templates.cellHeaderAuto));
            }
            for (var cellIndex = 0; cellIndex < cellElements.length; cellIndex++) {
                var cellElement = cellElements[cellIndex];
                fixGridCell(gridConfiguration, cellElement, cellTagName, cellElementDirectiveAttribute);
            }
        }
    }
    TrNgGrid.fixGridSection = fixGridSection;
    function fixTableStructure(gridConfiguration, gridElement) {
        var tableHeaderElement = findChildByTagName(gridElement, "thead");
        if (!tableHeaderElement) {
            tableHeaderElement = findChildByTagName(angular.element("<table><thead></thead></table"), "thead");
            gridElement.prepend(tableHeaderElement);
        }
        tableHeaderElement.attr(TrNgGrid.Constants.headerDirectiveAttribute, "");
        fixGridSection(gridConfiguration, tableHeaderElement, TrNgGrid.Constants.headerRowDirectiveAttribute, "th", TrNgGrid.Constants.cellHeaderDirectiveAttribute);
        var tableFooterElement = findChildByTagName(gridElement, "tfoot");
        if (!tableFooterElement) {
            tableFooterElement = findChildByTagName(angular.element("<table><tfoot></tfoot></table"), "tfoot");
            tableHeaderElement.after(tableFooterElement);
        }
        var tableBodyElement = findChildByTagName(gridElement, "tbody");
        if (!tableBodyElement) {
            tableBodyElement = findChildByTagName(angular.element("<table><tbody></tbody></table"), "tbody");
            tableFooterElement.after(tableBodyElement);
        }
        angular.forEach(gridElement.children, function (element) {
            if (element !== tableHeaderElement[0] || element !== tableBodyElement[0] || element !== tableFooterElement[0]) {
                angular.element(element).remove();
                gridConfiguration.debugMode && log("Invalid extra element found inside the grid template structure: " + element.tagName);
            }
        });
    }
    TrNgGrid.fixTableStructure = fixTableStructure;
})(TrNgGrid || (TrNgGrid = {}));

var TrNgGrid;
(function (TrNgGrid) {
    (function (GridSectionType) {
        GridSectionType[GridSectionType["Enforced"] = 0] = "Enforced";
        GridSectionType[GridSectionType["Header"] = 1] = "Header";
        GridSectionType[GridSectionType["Body"] = 2] = "Body";
    })(TrNgGrid.GridSectionType || (TrNgGrid.GridSectionType = {}));
    var GridSectionType = TrNgGrid.GridSectionType;
    var GridRow = (function () {
        function GridRow() {
            this.cells = [];
        }
        GridRow.prototype.registerCell = function (cell) {
            var cellFound = false;
            for (var cellIndex = 0; (cellIndex < this.cells.length) && (!cellFound); cellIndex++) {
                if (this.cells[cellIndex].fieldName === cell.fieldName) {
                    this.cells[cellIndex] = cell;
                    cellFound = true;
                }
            }
            if (!cellFound) {
                this.cells.push(cell);
            }
            return cell;
        };
        GridRow.prototype.unregisterCell = function (cell) {
            for (var cellIndex = 0; cellIndex < this.cells.length; cellIndex++) {
                if (this.cells[cellIndex] === cell) {
                    this.cells.splice(cellIndex, 1);
                    return;
                }
            }
        };
        return GridRow;
    })();
    TrNgGrid.GridRow = GridRow;
    var GridSection = (function () {
        function GridSection() {
            this.rows = [];
        }
        GridSection.prototype.registerRow = function () {
            var row = new GridRow();
            this.rows.push(row);
            return row;
        };
        GridSection.prototype.unregisterRow = function (row) {
            for (var rowIndex = 0; rowIndex < this.rows.length; rowIndex++) {
                if (this.rows[rowIndex] === row) {
                    this.rows.splice(rowIndex, 1);
                    return;
                }
            }
        };
        return GridSection;
    })();
    TrNgGrid.GridSection = GridSection;
    var GridLayout = (function () {
        function GridLayout() {
            this.sections = new Array(2 /* Body */ + 1);
        }
        GridLayout.prototype.getSection = function (section) {
            var colSection = this.sections[section];
            if (!colSection) {
                this.sections[section] = colSection = new GridSection();
            }
            return colSection;
        };
        return GridLayout;
    })();
    TrNgGrid.GridLayout = GridLayout;
})(TrNgGrid || (TrNgGrid = {}));

/// <reference path="../../../typings/angularjs/angular.d.ts"/>

var TrNgGrid;
(function (TrNgGrid) {
    var unnamedFieldNameCount = 0;
    (function (SelectionMode) {
        SelectionMode[SelectionMode["None"] = 0] = "None";
        SelectionMode[SelectionMode["SingleRow"] = 1] = "SingleRow";
        SelectionMode[SelectionMode["MultiRow"] = 2] = "MultiRow";
        SelectionMode[SelectionMode["MultiRowWithKeyModifiers"] = 3] = "MultiRowWithKeyModifiers";
    })(TrNgGrid.SelectionMode || (TrNgGrid.SelectionMode = {}));
    var SelectionMode = TrNgGrid.SelectionMode;
    var IGridRow = (function () {
        function IGridRow() {
        }
        return IGridRow;
    })();
    TrNgGrid.IGridRow = IGridRow;
    var GridController = (function () {
        function GridController($compile, $parse, $timeout, gridConfiguration) {
            this.$compile = $compile;
            this.$parse = $parse;
            this.$timeout = $timeout;
            this.gridConfiguration = gridConfiguration;
            this.gridLayout = new TrNgGrid.GridLayout();
        }
        GridController.prototype.setOptions = function (gridOptions) {
            var _this = this;
            this.gridOptions = gridOptions;
            if (this.gridOptions.onDataRequired) {
                var retrieveDataCallback = function () {
                    _this.dataRequestPromise = null;
                    _this.gridOptions.immediateDataRetrieval = false;
                    _this.gridOptions.onDataRequired(_this.gridOptions);
                };
                var scheduleDataRetrieval = function () {
                    if (_this.dataRequestPromise) {
                        _this.$timeout.cancel(_this.dataRequestPromise);
                        _this.dataRequestPromise = null;
                    }
                    if (_this.gridOptions.immediateDataRetrieval) {
                        retrieveDataCallback();
                    }
                    else {
                        _this.dataRequestPromise = _this.$timeout(function () {
                            retrieveDataCallback();
                        }, _this.gridOptions.onDataRequiredDelay, true);
                    }
                };
                this.gridOptions.$watch("gridOptions.currentPage", function (newValue, oldValue) {
                    if (newValue !== oldValue) {
                        scheduleDataRetrieval();
                    }
                });
                this.gridOptions.$watchCollection("[" + "gridOptions.filterBy, " + "gridOptions.filterByFields, " + "gridOptions.orderBy, " + "gridOptions.orderByReverse, " + "gridOptions.pageItems, " + "]", function () {
                    if (_this.gridOptions.currentPage !== 0) {
                        _this.gridOptions.currentPage = 0;
                        return;
                    }
                    scheduleDataRetrieval();
                });
                this.gridOptions.$watch("gridOptions.immediateDataRetrieval", function (newValue) {
                    if (newValue && _this.dataRequestPromise) {
                        _this.$timeout.cancel(_this.dataRequestPromise);
                        retrieveDataCallback();
                    }
                });
            }
            this.gridOptions.$watch("gridOptions.selectionMode", function (newValue, oldValue) {
                if (newValue !== oldValue) {
                    switch (newValue) {
                        case SelectionMode[0 /* None */]:
                            _this.gridOptions.selectedItems.splice(0);
                            break;
                        case SelectionMode[1 /* SingleRow */]:
                            if (_this.gridOptions.selectedItems.length > 1) {
                                _this.gridOptions.selectedItems.splice(1);
                            }
                            break;
                    }
                }
            });
        };
        GridController.prototype.speedUpAsyncDataRetrieval = function ($event) {
            if (!$event || $event.keyCode == 13) {
                this.gridOptions.immediateDataRetrieval = true;
            }
        };
        GridController.prototype.toggleSorting = function (propertyName) {
            if (this.gridOptions.orderBy != propertyName) {
                this.gridOptions.orderBy = propertyName;
            }
            else {
                this.gridOptions.orderByReverse = !this.gridOptions.orderByReverse;
            }
            this.speedUpAsyncDataRetrieval();
        };
        GridController.prototype.getFormattedFieldName = function (fieldName) {
        };
        GridController.prototype.setFilter = function (fieldName, filter) {
        };
        GridController.prototype.toggleItemSelection = function (filteredItems, item, $event) {
            if (this.gridOptions.selectionMode === SelectionMode[0 /* None */])
                return;
            switch (this.gridOptions.selectionMode) {
                case SelectionMode[3 /* MultiRowWithKeyModifiers */]:
                    if (!$event.ctrlKey && !$event.shiftKey && !$event.metaKey) {
                        var itemIndex = this.gridOptions.selectedItems.indexOf(item);
                        this.gridOptions.selectedItems.splice(0);
                        if (itemIndex < 0) {
                            this.gridOptions.selectedItems.push(item);
                        }
                    }
                    else {
                        if ($event.ctrlKey || $event.metaKey) {
                            var itemIndex = this.gridOptions.selectedItems.indexOf(item);
                            if (itemIndex >= 0) {
                                this.gridOptions.selectedItems.splice(itemIndex, 1);
                            }
                            else {
                                this.gridOptions.selectedItems.push(item);
                            }
                        }
                        else if ($event.shiftKey) {
                            if (document.selection && document.selection.empty) {
                                document.selection.empty();
                            }
                            else if (window.getSelection) {
                                var sel = window.getSelection();
                                sel.removeAllRanges();
                            }
                            var firstItemIndex;
                            var lastSelectedItem = this.gridOptions.selectedItems[this.gridOptions.selectedItems.length - 1];
                            for (firstItemIndex = 0; firstItemIndex < filteredItems.length && filteredItems[firstItemIndex].$$_gridItem !== lastSelectedItem; firstItemIndex++)
                                ;
                            if (firstItemIndex >= filteredItems.length) {
                                firstItemIndex = 0;
                            }
                            var lastItemIndex;
                            for (lastItemIndex = 0; lastItemIndex < filteredItems.length && filteredItems[lastItemIndex].$$_gridItem !== item; lastItemIndex++)
                                ;
                            if (lastItemIndex >= filteredItems.length) {
                                throw "Invalid selection on a key modifier selection mode";
                            }
                            if (lastItemIndex < firstItemIndex) {
                                var tempIndex = firstItemIndex;
                                firstItemIndex = lastItemIndex;
                                lastItemIndex = tempIndex;
                            }
                            for (var currentItemIndex = firstItemIndex; currentItemIndex <= lastItemIndex; currentItemIndex++) {
                                var currentItem = filteredItems[currentItemIndex].$$_gridItem;
                                if (this.gridOptions.selectedItems.indexOf(currentItem) < 0) {
                                    this.gridOptions.selectedItems.push(currentItem);
                                }
                            }
                        }
                    }
                    break;
                case SelectionMode[1 /* SingleRow */]:
                    var itemIndex = this.gridOptions.selectedItems.indexOf(item);
                    this.gridOptions.selectedItems.splice(0);
                    if (itemIndex < 0) {
                        this.gridOptions.selectedItems.push(item);
                    }
                    break;
                case SelectionMode[2 /* MultiRow */]:
                    var itemIndex = this.gridOptions.selectedItems.indexOf(item);
                    if (itemIndex >= 0) {
                        this.gridOptions.selectedItems.splice(itemIndex, 1);
                    }
                    else {
                        this.gridOptions.selectedItems.push(item);
                    }
                    break;
            }
        };
        GridController.prototype.computeFormattedItems = function () {
        };
        GridController.prototype.computeFilteredItems = function () {
        };
        GridController.prototype.setupDisplayItemsArray = function () {
        };
        return GridController;
    })();
    TrNgGrid.GridController = GridController;
    TrNgGrid.gridModule = angular.module(TrNgGrid.Constants.tableDirective, []);
    TrNgGrid.gridModule.directive(TrNgGrid.Constants.tableDirective, [
        TrNgGrid.Constants.gridConfigurationService,
        function (gridConfiguration) {
            return {
                restrict: 'A',
                scope: {
                    items: '=',
                    selectedItems: '=?',
                    filterBy: '=?',
                    filterByFields: '=?',
                    orderBy: '=?',
                    orderByReverse: '=?',
                    pageItems: '=?',
                    currentPage: '=?',
                    totalItems: '=?',
                    enableFiltering: '=?',
                    enableSorting: '=?',
                    selectionMode: '@',
                    locale: '@',
                    onDataRequired: '&',
                    onDataRequiredDelay: '=?',
                    fields: '=?'
                },
                controller: ["$compile", "$parse", "$timeout", TrNgGrid.Constants.gridConfigurationService, GridController],
                compile: function (templateElement, tAttrs) {
                    TrNgGrid.fixTableStructure(gridConfiguration, templateElement);
                    return {
                        pre: function (isolatedScope, instanceElement, tAttrs, controller, transcludeFn) {
                            controller.setOptions(isolatedScope);
                        }
                    };
                }
            };
        }
    ]);
})(TrNgGrid || (TrNgGrid = {}));

var TrNgGrid;
(function (TrNgGrid) {
    TrNgGrid.gridModule.directive(TrNgGrid.Constants.headerDirective, [
        function () {
            return {
                restrict: 'A',
                require: "^" + TrNgGrid.Constants.tableDirective,
                link: {
                    pre: function (scope, instanceElement, tAttrs, gridController, transcludeFn) {
                        scope.grid = gridController;
                        scope.gridOptions = gridController.gridOptions;
                    }
                }
            };
        }
    ]);
    TrNgGrid.gridModule.directive(TrNgGrid.Constants.cellHeaderDirective, [
        function () {
            return {
                restrict: 'A',
                require: "^" + TrNgGrid.Constants.tableDirective,
                transclude: true,
                scope: {
                    rowIndex: "@" + TrNgGrid.Constants.dataColumnRowIndexField,
                    batchIndex: "@" + TrNgGrid.Constants.dataColumnBatchIndexField,
                    isCustomized: "@" + TrNgGrid.Constants.dataColumnIsCustomizedField,
                    isAutoGenerated: "@" + TrNgGrid.Constants.dataColumnIsAutoGeneratedField,
                    fieldName: "@",
                    displayName: "@",
                    displayAlign: "@",
                    displayFormat: "@",
                    enableSorting: "@",
                    enableFiltering: "@",
                    cellWidth: "@",
                    cellHeight: "@",
                    filter: "@"
                },
                compile: function (templateElement, tAttrs) {
                    var gridColumn = null;
                    return {
                        pre: function (identityScope, instanceElement, tAttrs, gridController, transcludeFn) {
                            identityScope.displayFieldName = identityScope.fieldName ? identityScope.fieldName.replace(/[\.\[\]]/g, "_") : null;
                            gridColumn = gridController.setColumn(TrNgGrid.GridEntitySection.Header, {
                                fieldName: identityScope.fieldName,
                                batchIndex: identityScope.batchIndex,
                                rowIndex: identityScope.rowIndex,
                                isAutoGenerated: identityScope.isAutoGenerated,
                                isCustomized: identityScope.isCustomized
                            }, identityScope);
                            identityScope.$watch("displayName", function () {
                                var newColumnTitle;
                                if (gridColumn.options.displayName) {
                                    newColumnTitle = gridColumn.options.displayName;
                                }
                                else if (!gridColumn.identity.fieldName) {
                                    newColumnTitle = "[Invalid Field Name]";
                                }
                                else {
                                    var splitFieldName = gridColumn.identity.fieldName.match(/^[^\.\[\]]*/);
                                    splitFieldName = splitFieldName[0].split(/(?=[A-Z])/);
                                    if (splitFieldName.length && splitFieldName[0].length) {
                                        splitFieldName[0] = splitFieldName[0][0].toLocaleUpperCase() + splitFieldName[0].substr(1);
                                    }
                                    newColumnTitle = splitFieldName.join(" ");
                                }
                                gridColumn.options.columnTitle = newColumnTitle;
                            });
                            transcludeFn(function (clone, transcludedScope) {
                                transcludedScope.gridColumnOptions = gridColumn.options;
                                instanceElement.replaceWith(clone);
                            });
                            gridController.removeColumn(TrNgGrid.GridEntitySection.Header, gridColumn.identity);
                        },
                        post: function (identityScope, instanceElement, tAttrs, gridController, transcludeFn) {
                        }
                    };
                }
            };
        }
    ]);
})(TrNgGrid || (TrNgGrid = {}));

var TrNgGrid;
(function (TrNgGrid) {
    var GridConfigurationDefaultPagerOptions = (function () {
        function GridConfigurationDefaultPagerOptions() {
            this.minifiedPageCountThreshold = 3;
        }
        return GridConfigurationDefaultPagerOptions;
    })();
    var GridConfigurationDefaultStyles = (function () {
        function GridConfigurationDefaultStyles() {
            this.tableCssClass = "tr-ng-grid table table-bordered table-hover ";
            this.cellCssClass = "tr-ng-cell ";
            this.headerCellCssClass = "tr-ng-cell tr-ng-column-header ";
            this.bodyCellCssClass = "tr-ng-cell ";
            this.columnTitleCssClass = "tr-ng-title ";
            this.columnSortCssClass = "tr-ng-sort pull-right pull-top ";
            this.columnFilterInputWrapperCssClass = " ";
            this.columnFilterCssClass = "tr-ng-column-filter ";
            this.columnSortActiveCssClass = "tr-ng-sort-active text-info ";
            this.columnSortInactiveCssClass = "tr-ng-sort-inactive text-muted glyphicon glyphicon-chevron-down ";
            this.columnSortReverseOrderCssClass = "tr-ng-sort-order-reverse glyphicon glyphicon-chevron-down ";
            this.columnSortNormalOrderCssClass = "tr-ng-sort-order-normal glyphicon glyphicon-chevron-up ";
            this.rowSelectedCssClass = "active ";
            this.footerCssClass = "tr-ng-grid-footer form-inline ";
        }
        return GridConfigurationDefaultStyles;
    })();
    var GridConfigurationDefaultColumnOptions = (function () {
        function GridConfigurationDefaultColumnOptions() {
            this.displayAlign = "left";
        }
        return GridConfigurationDefaultColumnOptions;
    })();
    var GridConfigurationDefaultTemplates = (function () {
        function GridConfigurationDefaultTemplates($interpolateProvider, gridStyles) {
            var startNgSymbol = $interpolateProvider.startSymbol();
            var endNgSymbol = $interpolateProvider.endSymbol();
            this.cellHeaderAuto = '<td data-ng-repeat="columnOptions in rowColumns" +' + TrNgGrid.Constants.cellHeaderTemplateDirectiveAttribute + '=""></td>';
            this.cellHeader = '<div class="' + gridStyles.headerCellCssClass + '" >' + '  <div ng-if="isCustomized" ng-transclude=""></div>' + '  <div ng-if="!isCustomized" ' + TrNgGrid.Constants.columnSortDirectiveAttribute + '=""></div>' + '  <a ng-if="!isCustomized" class="' + gridStyles.columnTitleCssClass + '"' + '     href="" ng-click="((gridOptions.enableSorting&&columnOptions.enableSorting!==false)||columnOptions.enableSorting)&&toggleSorting(columnOptions.fieldName)">' + '      {{columnTitle |' + TrNgGrid.Constants.translateFilter + ':gridOptions.locale}}' + '  </a>' + '  <div ng-if="!isCustomized" ' + TrNgGrid.Constants.columnFilterDirectiveAttribute + '=""></div>' + '</div>';
            this.cellBody = '<div ng-attr-class="' + gridStyles.bodyCellCssClass + ' text-{{columnOptions.displayAlign}}" ng-switch="isCustomized">' + '  <div ng-switch-when="true">' + '    <div ng-transclude=""></div>' + '  </div>' + '  <div ng-switch-default>{{gridDisplayItem[columnOptions.displayFieldName]}}</div>' + '</div>';
            this.cellFooter = '<div class="' + gridStyles.footerCssClass + '" ng-switch="isCustomized">' + '  <div ng-switch-when="true">' + '    <div ng-transclude=""></div>' + '  </div>' + '  <div ng-switch-default>' + '    <span ' + TrNgGrid.Constants.globalFilterDirectiveAttribute + '=""></span>' + '    <span ' + TrNgGrid.Constants.pagerDirectiveAttribute + '=""></span>' + '  </div>' + '</div>';
            this.columnFilter = '<div ng-show="(gridOptions.enableFiltering&&columnOptions.enableFiltering!==false)||columnOptions.enableFiltering" class="' + gridStyles.columnFilterCssClass + '">' + ' <div class="' + gridStyles.columnFilterInputWrapperCssClass + '">' + '   <input class="form-control input-sm" type="text" ng-model="columnOptions.filter" ng-keypress="speedUpAsyncDataRetrieval($event)"></input>' + ' </div>' + '</div>';
            this.columnSort = '<a href="" ng-attr-title="{{\'Sort\'|' + TrNgGrid.Constants.translateFilter + ':gridOptions.locale}}"' + ' ng-show="(gridOptions.enableSorting&&columnOptions.enableSorting!==false)||columnOptions.enableSorting"' + ' ng-click="toggleSorting(columnOptions.fieldName)"' + ' class="' + gridStyles.columnSortCssClass + '" > ' + '  <span ng-class="{\'' + gridStyles.columnSortActiveCssClass + '\':gridOptions.orderBy==columnOptions.fieldName,\'' + gridStyles.columnSortInactiveCssClass + '\':gridOptions.orderBy!=columnOptions.fieldName,\'' + gridStyles.columnSortNormalOrderCssClass + '\':gridOptions.orderBy==columnOptions.fieldName&&!gridOptions.orderByReverse,\'' + gridStyles.columnSortReverseOrderCssClass + '\':gridOptions.orderBy==columnOptions.fieldName&&gridOptions.orderByReverse}" >' + '  </span>' + '</a>';
            this.footerGlobalFilter = '<span ng-show="gridOptions.enableFiltering" class="pull-left form-group">' + '  <input class="form-control" type="text" ng-model="gridOptions.filterBy" ng-keypress="speedUpAsyncDataRetrieval($event)" ng-attr-placeholder="{{\'Search\'|' + TrNgGrid.Constants.translateFilter + ':gridOptions.locale}}"></input>' + '</span>';
            this.footerPager = '<span class="pull-right form-group">' + ' <ul class="pagination">' + '   <li ng-class="{disabled:gridOptions.currentPage==0}" ng-if="isPaged&&!pageRangeFullCoverage">' + '     <a href="" ng-click="gridOptions.currentPage!=0&&navigateToPage(0)" ng-attr-title="{{\'First Page\'|' + TrNgGrid.Constants.translateFilter + ':gridOptions.locale}}">' + '         <span>&laquo;</span>' + '     </a>' + '   </li>' + '   <li ng-class="{disabled:gridOptions.currentPage==0}" ng-if="isPaged&&!pageRangeFullCoverage">' + '     <a href="" ng-click="gridOptions.currentPage!=0&&navigateToPage(gridOptions.currentPage - 1)" ng-attr-title="{{\'Previous Page\'|' + TrNgGrid.Constants.translateFilter + ':gridOptions.locale}}">' + '         <span>&lsaquo;</span>' + '     </a>' + '   </li>' + '   <li ng-if="isPaged&&!pageRangeFullCoverage&&visiblePageRange[0]!=0"class="disabled">' + '      <span>...</span>' + '   </li>' + '   <li ng-if="isPaged" ng-repeat="pageIndex in visiblePageRange track by $index" ng-class="{active:pageIndex===gridOptions.currentPage}">' + '      <a href="" ng-click="navigateToPage(pageIndex)" ng-attr-title="{{\'Page\'|' + TrNgGrid.Constants.translateFilter + ':gridOptions.locale}}">{{pageIndex+1}}</a>' + '   </li>' + '   <li ng-if="isPaged&&!pageRangeFullCoverage&&visiblePageRange[visiblePageRange.length-1]!=lastPage" class="disabled">' + '      <span>...</span>' + '   </li>' + '   <li ng-class="{disabled:gridOptions.currentPage==lastPage}" ng-if="isPaged&&!pageRangeFullCoverage">' + '     <a href="" ng-click="gridOptions.currentPage!=lastPage&&navigateToPage(gridOptions.currentPage + 1)" ng-attr-title="{{\'Next Page\'|' + TrNgGrid.Constants.translateFilter + ':gridOptions.locale}}">' + '         <span>&rsaquo;</span>' + '     </a>' + '   </li>' + '   <li ng-class="{disabled:gridOptions.currentPage==lastPage}" ng-if="isPaged&&!pageRangeFullCoverage">' + '     <a href="" ng-click="gridOptions.currentPage!=lastPage&&navigateToPage(lastPage)" ng-attr-title="{{\'Last Page\'|' + TrNgGrid.Constants.translateFilter + ':gridOptions.locale}}">' + '         <span>&raquo;</span>' + '     </a>' + '   </li>' + '   <li class="disabled" style="white-space: nowrap;">' + '     <span ng-hide="totalItemsCount">{{\'No items to display\'|' + TrNgGrid.Constants.translateFilter + ':gridOptions.locale}}</span>' + '     <span ng-show="totalItemsCount">' + '       {{visibleStartItemIndex+1}} - {{visibleEndItemIndex+1}} {{\'displayed\'|' + TrNgGrid.Constants.translateFilter + ':gridOptions.locale}}' + '       <span>, {{totalItemsCount}} {{\'in total\'|' + TrNgGrid.Constants.translateFilter + ':gridOptions.locale}}</span>' + '     </span > ' + '   </li>' + ' </ul>' + '</span>';
        }
        return GridConfigurationDefaultTemplates;
    })();
    var GridConfigurationProvider = (function () {
        function GridConfigurationProvider($interpolateProvider) {
            var _this = this;
            this.$interpolateProvider = $interpolateProvider;
            this.$get = [
                function () {
                    return {
                        styles: _this.styles(),
                        defaultColumnOptions: _this.defaultColumnOptions(),
                        translations: _this.gridTranslations,
                        pagerOptions: _this.pagerOptions(),
                        templates: _this.templates(),
                        debugMode: _this.debugMode()
                    };
                }
            ];
            this.gridTranslations = {};
            this.gridDebugMode = false;
        }
        GridConfigurationProvider.prototype.styles = function (styles) {
            if (styles) {
                this.gridStyles = angular.extend({}, new GridConfigurationDefaultStyles(), styles);
            }
            return angular.extend({}, this.gridStyles || new GridConfigurationDefaultStyles());
        };
        GridConfigurationProvider.prototype.defaultColumnOptions = function (columnOptions) {
            if (columnOptions) {
                this.gridDefaultColumnOptions = angular.extend({}, new GridConfigurationDefaultColumnOptions(), columnOptions);
            }
            return angular.extend({}, this.gridDefaultColumnOptions || new GridConfigurationDefaultColumnOptions());
        };
        GridConfigurationProvider.prototype.translations = function (locale, translations) {
            var localeTranslations = this.gridTranslations[locale] = angular.extend({}, this.gridTranslations[locale], translations);
            return angular.extend({}, localeTranslations);
        };
        GridConfigurationProvider.prototype.defaultTranslations = function (translations) {
            return this.translations(TrNgGrid.Constants.defaultTranslationLocale, translations);
        };
        GridConfigurationProvider.prototype.pagerOptions = function (pagerOptions) {
            if (pagerOptions) {
                this.gridPagerOptions = angular.extend({}, new GridConfigurationDefaultPagerOptions(), pagerOptions);
            }
            return angular.extend({}, this.gridPagerOptions || new GridConfigurationDefaultPagerOptions());
        };
        GridConfigurationProvider.prototype.templates = function (templates) {
            if (templates) {
                this.gridTemplates = angular.extend({}, new GridConfigurationDefaultTemplates(this.$interpolateProvider, this.styles()), templates);
            }
            return angular.extend({}, this.gridTemplates || new GridConfigurationDefaultTemplates(this.$interpolateProvider, this.styles()));
        };
        GridConfigurationProvider.prototype.debugMode = function (debugMode) {
            if (debugMode !== undefined) {
                this.gridDebugMode = !!debugMode;
            }
            return this.gridDebugMode;
        };
        return GridConfigurationProvider;
    })();
    angular.module(TrNgGrid.Constants.tableDirective).provider(TrNgGrid.Constants.gridConfigurationService, GridConfigurationProvider);
})(TrNgGrid || (TrNgGrid = {}));

